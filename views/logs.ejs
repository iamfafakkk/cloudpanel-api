<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>System Logs - CloudPanel API</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: {
                            50: '#f0f9ff',
                            500: '#3b82f6',
                            600: '#2563eb',
                            700: '#1d4ed8',
                        }
                    }
                }
            }
        }
    </script>
</head>
<body class="bg-gray-50 font-sans">
    <div class="max-w-7xl mx-auto p-6">
        <div class="bg-white rounded-lg shadow-lg overflow-hidden">
            <!-- Navigation Header -->
            <nav class="bg-white border-b border-gray-200 shadow-sm">
                <div class="px-4 lg:px-8 py-4">
                    <div class="flex justify-between items-center">
                        <!-- Logo/Brand -->
                        <div class="flex items-center space-x-2 lg:space-x-4">
                            <div class="text-xl lg:text-2xl font-bold text-blue-600">CloudPanel</div>
                            <span class="text-gray-400 hidden sm:inline">|</span>
                            <span class="text-gray-600 font-medium hidden sm:inline">API Management</span>
                        </div>
                        
                        <!-- Navigation Menu -->
                        <div class="flex items-center space-x-2 lg:space-x-6">
                            <a href="/docs" class="flex items-center px-2 lg:px-4 py-2 text-gray-600 hover:text-blue-600 hover:bg-gray-50 rounded-lg font-medium transition-all duration-200 text-sm lg:text-base">
                                <svg class="w-4 h-4 lg:w-5 lg:h-5 mr-1 lg:mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                </svg>
                                <span class="hidden sm:inline">Docs</span>
                            </a>
                            <a href="/sites" class="flex items-center px-2 lg:px-4 py-2 text-gray-600 hover:text-blue-600 hover:bg-gray-50 rounded-lg font-medium transition-all duration-200 text-sm lg:text-base">
                                <svg class="w-4 h-4 lg:w-5 lg:h-5 mr-1 lg:mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9m0 9c-5 0-9-4-9-9s4-9 9-9"></path>
                                </svg>
                                <span class="hidden sm:inline">Site Lists</span>
                            </a>
                            <a href="/logs" class="flex items-center px-2 lg:px-4 py-2 text-blue-600 bg-blue-50 rounded-lg font-medium transition-all duration-200 hover:bg-blue-100 text-sm lg:text-base">
                                <svg class="w-4 h-4 lg:w-5 lg:h-5 mr-1 lg:mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                </svg>
                                <span class="hidden sm:inline">Logs</span>
                            </a>
                            
                            <!-- User Menu -->
                            <div class="relative group">
                                <button class="flex items-center px-2 lg:px-4 py-2 text-gray-600 hover:text-blue-600 hover:bg-gray-50 rounded-lg font-medium transition-all duration-200 text-sm lg:text-base">
                                    <svg class="w-4 h-4 lg:w-5 lg:h-5 mr-1 lg:mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                    </svg>
                                    <span class="hidden sm:inline">Account</span>
                                    <svg class="w-3 h-3 lg:w-4 lg:h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                    </svg>
                                </button>
                                
                                <!-- Dropdown Menu -->
                                <div class="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-10">
                                    <div class="py-2">
                                        <a href="/profile" class="block px-4 py-2 text-gray-700 hover:bg-gray-50 hover:text-blue-600 transition-colors duration-200 text-sm">
                                            <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                            </svg>
                                            Profile
                                        </a>
                                        <a href="/settings" class="block px-4 py-2 text-gray-700 hover:bg-gray-50 hover:text-blue-600 transition-colors duration-200 text-sm">
                                            <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                            </svg>
                                            Settings
                                        </a>
                                        <hr class="my-2 border-gray-200">
                                        <a href="/auth/logout" class="block px-4 py-2 text-red-600 hover:bg-red-50 transition-colors duration-200 text-sm">
                                            <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
                                            </svg>
                                            Logout
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </nav>
            
            <!-- Header -->
            <div class="relative bg-gradient-to-r from-blue-600 to-purple-600 text-white p-4 lg:p-8 text-center">
                <h1 class="text-2xl lg:text-3xl font-bold mb-2">Application Logs</h1>
                <p class="text-blue-100 text-sm lg:text-base">Monitor CloudPanel API application activities and events</p>
                <div class="mt-3 flex items-center justify-center space-x-4">
                    <div class="flex items-center bg-white/20 rounded-full px-3 py-1 text-sm">
                        <span class="w-2 h-2 bg-green-400 rounded-full mr-2"></span>
                        <span id="connection-mode">Log Source: Loading...</span>
                    </div>
                    <button onclick="testConnection()" class="bg-white/20 hover:bg-white/30 text-white px-4 py-1 rounded-full text-sm transition-colors duration-200">
                        Test Log Files
                    </button>
                </div>
            </div>
            
            <div class="p-4 lg:p-8">
                <!-- Filter and Control Bar -->
                <div class="mb-8">
                    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-3 mb-4">
                        <select id="level-filter" class="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm" onchange="filterLogs()">
                            <option value="">All Levels</option>
                            <option value="info">Info</option>
                            <option value="warning">Warning</option>
                            <option value="error">Error</option>
                        </select>
                        
                        <select id="type-filter" class="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm" onchange="filterLogs()">
                            <option value="">All Types</option>
                            <option value="application">Application</option>
                            <option value="error">Errors</option>
                            <option value="api">API</option>
                            <option value="system">System</option>
                        </select>
                        
                        <select id="action-filter" class="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm" onchange="filterLogs()">
                            <option value="">All Actions</option>
                            <option value="API Request">API Request</option>
                            <option value="Authentication">Authentication</option>
                            <option value="Database">Database</option>
                            <option value="Session">Session</option>
                            <option value="CloudPanel">CloudPanel</option>
                            <option value="Server Start">Server Start</option>
                            <option value="Validation">Validation</option>
                            <option value="Response">Response</option>
                        </select>
                        
                        <input 
                            type="text" 
                            id="search-input" 
                            placeholder="Search logs..." 
                            class="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                            onkeyup="filterLogs()"
                        >
                        
                        <button onclick="refreshLogs()" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition-colors duration-200 flex items-center justify-center text-sm">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                            </svg>
                            Refresh
                        </button>
                    </div>
                    
                    <!-- Auto-refresh toggle -->
                    <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-4">
                            <label class="flex items-center cursor-pointer">
                                <input type="checkbox" id="auto-refresh" class="sr-only" onchange="toggleAutoRefresh()">
                                <div class="relative">
                                    <input type="checkbox" class="sr-only">
                                    <div class="w-10 h-6 bg-gray-200 rounded-full shadow-inner"></div>
                                    <div class="dot absolute w-4 h-4 bg-white rounded-full shadow -left-1 -top-1 transition"></div>
                                </div>
                                <span class="ml-3 text-gray-700 text-sm">Auto-refresh (30s)</span>
                            </label>
                        </div>
                        
                        <div class="text-sm text-gray-500">
                            Total logs: <span id="total-logs"><%= logs.length %></span>
                        </div>
                    </div>
                </div>

                <!-- Stats Cards -->
                <div class="grid grid-cols-2 lg:grid-cols-4 gap-4 lg:gap-6 mb-8">
                    <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 lg:p-6">
                        <div class="flex items-center">
                            <div class="p-2 lg:p-3 bg-blue-500 rounded-lg">
                                <svg class="w-4 h-4 lg:w-6 lg:h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                </svg>
                            </div>
                            <div class="ml-3 lg:ml-4">
                                <h3 class="text-xs lg:text-sm font-medium text-gray-500">Total Logs</h3>
                                <p class="text-lg lg:text-2xl font-semibold text-gray-900" id="stat-total"><%= logs.length %></p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="bg-green-50 border border-green-200 rounded-lg p-4 lg:p-6">
                        <div class="flex items-center">
                            <div class="p-2 lg:p-3 bg-green-500 rounded-lg">
                                <svg class="w-4 h-4 lg:w-6 lg:h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                            </div>
                            <div class="ml-3 lg:ml-4">
                                <h3 class="text-xs lg:text-sm font-medium text-gray-500">Info Logs</h3>
                                <p class="text-lg lg:text-2xl font-semibold text-gray-900" id="stat-info"><%= logs.filter(log => log.level === 'info').length %></p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 lg:p-6">
                        <div class="flex items-center">
                            <div class="p-2 lg:p-3 bg-yellow-500 rounded-lg">
                                <svg class="w-4 h-4 lg:w-6 lg:h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.99-.833-2.76 0L4.054 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                                </svg>
                            </div>
                            <div class="ml-3 lg:ml-4">
                                <h3 class="text-xs lg:text-sm font-medium text-gray-500">Warnings</h3>
                                <p class="text-lg lg:text-2xl font-semibold text-gray-900" id="stat-warning"><%= logs.filter(log => log.level === 'warning').length %></p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="bg-red-50 border border-red-200 rounded-lg p-4 lg:p-6">
                        <div class="flex items-center">
                            <div class="p-2 lg:p-3 bg-red-500 rounded-lg">
                                <svg class="w-4 h-4 lg:w-6 lg:h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                            </div>
                            <div class="ml-3 lg:ml-4">
                                <h3 class="text-xs lg:text-sm font-medium text-gray-500">Errors</h3>
                                <p class="text-lg lg:text-2xl font-semibold text-gray-900" id="stat-error"><%= logs.filter(log => log.level === 'error').length %></p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Logs Table -->
                <div class="bg-white border border-gray-200 rounded-lg overflow-hidden">
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Timestamp
                                    </th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Level
                                    </th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Action
                                    </th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Message
                                    </th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Source
                                    </th>
                                </tr>
                            </thead>
                            <tbody id="logs-table" class="bg-white divide-y divide-gray-200">
                                <% logs.forEach((log, index) => { %>
                                <tr class="log-row hover:bg-gray-50" 
                                    data-level="<%= log.level %>" 
                                    data-type="<%= log.type %>" 
                                    data-action="<%= log.action %>">
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                        <%= new Date(log.timestamp).toLocaleString() %>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <% 
                                        let levelClass = 'bg-gray-100 text-gray-800';
                                        if (log.level === 'info') levelClass = 'bg-blue-100 text-blue-800';
                                        else if (log.level === 'warning') levelClass = 'bg-yellow-100 text-yellow-800';
                                        else if (log.level === 'error') levelClass = 'bg-red-100 text-red-800';
                                        %>
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium <%= levelClass %>">
                                            <%= log.level.toUpperCase() %>
                                        </span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                                            <%= log.action %>
                                        </span>
                                    </td>
                                    <td class="px-6 py-4 text-sm text-gray-900 max-w-md truncate" title="<%= log.message %>">
                                        <%= log.message %>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                        <%= log.source %>
                                    </td>
                                </tr>
                                <% }); %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let autoRefreshInterval;
        let isAutoRefresh = false;

        function filterLogs() {
            const levelFilter = document.getElementById('level-filter').value;
            const typeFilter = document.getElementById('type-filter').value;
            const actionFilter = document.getElementById('action-filter').value;
            const searchInput = document.getElementById('search-input').value.toLowerCase();
            
            const rows = document.querySelectorAll('.log-row');
            let visibleCount = 0;
            
            rows.forEach(row => {
                const level = row.getAttribute('data-level');
                const type = row.getAttribute('data-type');
                const action = row.getAttribute('data-action');
                const message = row.textContent.toLowerCase();
                
                const levelMatch = !levelFilter || level === levelFilter;
                const typeMatch = !typeFilter || type === typeFilter;
                const actionMatch = !actionFilter || action === actionFilter;
                const searchMatch = !searchInput || message.includes(searchInput);
                
                if (levelMatch && typeMatch && actionMatch && searchMatch) {
                    row.style.display = '';
                    visibleCount++;
                } else {
                    row.style.display = 'none';
                }
            });
            
            document.getElementById('total-logs').textContent = visibleCount;
        }

        function refreshLogs() {
            location.reload();
        }

        async function testConnection() {
            const button = event.target;
            const originalText = button.textContent;
            button.textContent = 'Testing...';
            button.disabled = true;
            
            try {
                const response = await fetch('/logs/api/test-connection');
                const data = await response.json();
                
                if (data.success) {
                    // Only update the UI, no alert for success
                    updateConnectionMode(data.mode, true);
                    
                    // Show brief success indication
                    button.textContent = '✓ Success';
                    setTimeout(() => {
                        button.textContent = originalText;
                    }, 2000);
                } else {
                    alert(`Log files test failed!\nError: ${data.error}\n\n${data.output || ''}`);
                    updateConnectionMode(data.mode, false);
                }
            } catch (error) {
                alert(`Log files test failed!\nError: ${error.message}`);
                updateConnectionMode('Project Logs', false);
            } finally {
                if (!button.textContent.includes('✓')) {
                    button.textContent = originalText;
                }
                button.disabled = false;
            }
        }

        function updateConnectionMode(mode, isConnected) {
            const modeElement = document.getElementById('connection-mode');
            const statusIndicator = modeElement.parentElement.querySelector('.w-2');
            
            modeElement.textContent = `Log Source: ${mode}`;
            
            if (isConnected) {
                statusIndicator.classList.remove('bg-red-400', 'bg-yellow-400');
                statusIndicator.classList.add('bg-green-400');
            } else {
                statusIndicator.classList.remove('bg-green-400', 'bg-yellow-400');
                statusIndicator.classList.add('bg-red-400');
            }
        }

        function toggleAutoRefresh() {
            const checkbox = document.getElementById('auto-refresh');
            isAutoRefresh = checkbox.checked;
            
            if (isAutoRefresh) {
                autoRefreshInterval = setInterval(refreshLogs, 30000);
            } else {
                clearInterval(autoRefreshInterval);
            }
        }

        // Initialize connection mode check and auto-refresh checkbox styling
        document.addEventListener('DOMContentLoaded', function() {
            // Test connection on page load
            testConnection();
            
            const checkbox = document.getElementById('auto-refresh');
            const dot = document.querySelector('.dot');
            
            checkbox.addEventListener('change', function() {
                if (this.checked) {
                    this.parentNode.querySelector('.w-10').classList.add('bg-blue-500');
                    this.parentNode.querySelector('.w-10').classList.remove('bg-gray-200');
                    dot.classList.add('translate-x-4');
                } else {
                    this.parentNode.querySelector('.w-10').classList.remove('bg-blue-500');
                    this.parentNode.querySelector('.w-10').classList.add('bg-gray-200');
                    dot.classList.remove('translate-x-4');
                }
            });
        });
    </script>
</body>
</html>
