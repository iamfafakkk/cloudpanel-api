<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Setup History - CloudPanel API</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
      tailwind.config = {
        theme: {
          extend: {
            colors: {
              primary: {
                50: "#f0f9ff",
                500: "#3b82f6",
                600: "#2563eb",
                700: "#1d4ed8",
              },
            },
            animation: {
              "fade-in": "fadeIn 0.3s ease-out",
              "fade-out": "fadeOut 0.3s ease-in",
              "scale-in": "scaleIn 0.3s ease-out",
              "scale-out": "scaleOut 0.3s ease-in",
            },
            keyframes: {
              fadeIn: {
                "0%": { opacity: "0" },
                "100%": { opacity: "1" },
              },
              fadeOut: {
                "0%": { opacity: "1" },
                "100%": { opacity: "0" },
              },
              scaleIn: {
                "0%": { opacity: "0", transform: "scale(0.95)" },
                "100%": { opacity: "1", transform: "scale(1)" },
              },
              scaleOut: {
                "0%": { opacity: "1", transform: "scale(1)" },
                "100%": { opacity: "0", transform: "scale(0.95)" },
              },
            },
          },
        },
      };
    </script>
  </head>
  <body class="bg-gray-50 font-sans">
    <div class="max-w-7xl mx-auto p-6">
      <!-- Loading Overlay -->
      <div
        id="loadingOverlay"
        class="fixed inset-0 bg-gray-900 bg-opacity-50 z-50 hidden items-center justify-center"
      >
        <div
          class="bg-white rounded-lg p-8 flex flex-col items-center max-w-sm mx-4"
        >
          <div
            class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mb-4"
          ></div>
          <div
            class="text-lg font-medium text-gray-900 text-center"
            id="loadingText"
          >
            Loading setup history...
          </div>
          <div
            class="text-sm text-gray-500 mt-2 text-center"
            id="loadingSubtext"
          >
            Please wait while we fetch the data
          </div>

          <!-- Progress bar for longer operations -->
          <div id="loadingProgress" class="w-full mt-4 hidden">
            <div class="bg-gray-200 rounded-full h-2">
              <div
                id="progressBar"
                class="bg-blue-600 h-2 rounded-full transition-all duration-300"
                style="width: 0%"
              ></div>
            </div>
            <div
              class="text-xs text-gray-500 mt-1 text-center"
              id="progressText"
            >
              0%
            </div>
          </div>
        </div>
      </div>

      <!-- Refresh Loading Indicator -->
      <div id="refreshLoading" class="hidden">
        <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
          <div class="flex items-center">
            <div
              class="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600 mr-3"
            ></div>
            <div class="text-blue-800">
              <div class="font-medium">Refreshing data...</div>
              <div class="text-sm">Fetching latest setup information</div>
            </div>
          </div>
        </div>
      </div>

      <div class="bg-white rounded-lg shadow-lg overflow-hidden">
        <!-- Navigation Header -->
        <nav class="bg-white border-b border-gray-200 shadow-sm">
          <div class="px-4 lg:px-8 py-4">
            <div class="flex justify-between items-center">
              <!-- Logo/Brand -->
              <div class="flex items-center space-x-2 lg:space-x-4">
                <div class="text-xl lg:text-2xl font-bold text-blue-600">
                  CloudPanel
                </div>
                <span class="text-gray-400 hidden sm:inline">|</span>
                <span class="text-gray-600 font-medium hidden sm:inline"
                  >API Management</span
                >
              </div>

              <!-- Navigation Menu -->
              <div class="flex items-center space-x-2 lg:space-x-6">
                <a
                  href="/docs"
                  class="flex items-center px-2 lg:px-4 py-2 text-gray-600 hover:text-blue-600 hover:bg-gray-50 rounded-lg font-medium transition-all duration-200 text-sm lg:text-base"
                >
                  <svg
                    class="w-4 h-4 lg:w-5 lg:h-5 mr-1 lg:mr-2"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"
                    ></path>
                  </svg>
                  <span class="hidden sm:inline">Docs</span>
                </a>
                <a
                  href="/sites"
                  class="flex items-center px-2 lg:px-4 py-2 text-gray-600 hover:text-blue-600 hover:bg-gray-50 rounded-lg font-medium transition-all duration-200 text-sm lg:text-base"
                >
                  <svg
                    class="w-4 h-4 lg:w-5 lg:h-5 mr-1 lg:mr-2"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9m0 9c-5 0-9-4-9-9s4-9 9-9"
                    ></path>
                  </svg>
                  <span class="hidden sm:inline">Site Lists</span>
                </a>
                <a
                  href="/sites/setup-history"
                  class="flex items-center px-2 lg:px-4 py-2 text-blue-600 bg-blue-50 rounded-lg font-medium transition-all duration-200 hover:bg-blue-100 text-sm lg:text-base"
                >
                  <svg
                    class="w-4 h-4 lg:w-5 lg:h-5 mr-1 lg:mr-2"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                    ></path>
                  </svg>
                  <span class="hidden sm:inline">Setup History</span>
                </a>
                <a
                  href="/logs"
                  class="flex items-center px-2 lg:px-4 py-2 text-gray-600 hover:text-blue-600 hover:bg-gray-50 rounded-lg font-medium transition-all duration-200 text-sm lg:text-base"
                >
                  <svg
                    class="w-4 h-4 lg:w-5 lg:h-5 mr-1 lg:mr-2"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
                    ></path>
                  </svg>
                  <span class="hidden sm:inline">Logs</span>
                </a>

                <!-- User Menu -->
                <div class="relative group">
                  <button
                    class="flex items-center px-2 lg:px-4 py-2 text-gray-600 hover:text-blue-600 hover:bg-gray-50 rounded-lg font-medium transition-all duration-200 text-sm lg:text-base"
                  >
                    <svg
                      class="w-4 h-4 lg:w-5 lg:h-5 mr-1 lg:mr-2"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                      ></path>
                    </svg>
                    <span class="hidden sm:inline">Account</span>
                    <svg
                      class="w-3 h-3 lg:w-4 lg:h-4 ml-1"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M19 9l-7 7-7-7"
                      ></path>
                    </svg>
                  </button>

                  <!-- Dropdown Menu -->
                  <div
                    class="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-10"
                  >
                    <div class="py-2">
                      <a
                        href="/auth/logout"
                        class="block px-4 py-2 text-red-600 hover:bg-red-50 transition-colors duration-200 text-sm"
                      >
                        <svg
                          class="w-4 h-4 inline mr-2"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"
                          ></path>
                        </svg>
                        Logout
                      </a>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </nav>

        <!-- Header -->
        <div
          class="relative bg-gradient-to-r from-purple-600 to-blue-600 text-white p-4 lg:p-8 text-center"
        >
          <h1 class="text-2xl lg:text-3xl font-bold mb-2">Setup History</h1>
          <p class="text-blue-100 text-sm lg:text-base">
            Track all Laravel setup attempts and their status
          </p>
          <div class="mt-2 text-xs text-blue-200">
            <strong>Data Logic:</strong> Completed setups create new entries
            when failed. Failed setups update existing records.
          </div>
        </div>

        <div class="p-4 lg:p-8">
          <!-- Stats Cards -->
          <div class="grid grid-cols-2 lg:grid-cols-5 gap-4 lg:gap-6 mb-8">
            <div
              class="bg-green-50 border border-green-200 rounded-lg p-4 lg:p-6"
            >
              <div class="flex items-center">
                <div class="p-2 lg:p-3 bg-green-500 rounded-lg">
                  <svg
                    class="w-4 h-4 lg:w-6 lg:h-6 text-white"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M5 13l4 4L19 7"
                    ></path>
                  </svg>
                </div>
                <div class="ml-3 lg:ml-4">
                  <p class="text-sm lg:text-base text-green-600 font-medium">
                    Completed
                  </p>
                  <p
                    class="text-lg lg:text-2xl font-bold text-green-900"
                    id="completed-count"
                  >
                    <%= setupData.filter(setup => setup.setup_status ===
                    'completed').length %>
                  </p>
                </div>
              </div>
            </div>

            <div class="bg-red-50 border border-red-200 rounded-lg p-4 lg:p-6">
              <div class="flex items-center">
                <div class="p-2 lg:p-3 bg-red-500 rounded-lg">
                  <svg
                    class="w-4 h-4 lg:w-6 lg:h-6 text-white"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M6 18L18 6M6 6l12 12"
                    ></path>
                  </svg>
                </div>
                <div class="ml-3 lg:ml-4">
                  <p class="text-sm lg:text-base text-red-600 font-medium">
                    Failed
                  </p>
                  <p
                    class="text-lg lg:text-2xl font-bold text-red-900"
                    id="failed-count"
                  >
                    <%= setupData.filter(setup => setup.setup_status ===
                    'failed').length %>
                  </p>
                </div>
              </div>
            </div>

            <div
              class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 lg:p-6"
            >
              <div class="flex items-center">
                <div class="p-2 lg:p-3 bg-yellow-500 rounded-lg">
                  <svg
                    class="w-4 h-4 lg:w-6 lg:h-6 text-white"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                    ></path>
                  </svg>
                </div>
                <div class="ml-3 lg:ml-4">
                  <p class="text-sm lg:text-base text-yellow-600 font-medium">
                    In Progress
                  </p>
                  <p
                    class="text-lg lg:text-2xl font-bold text-yellow-900"
                    id="progress-count"
                  >
                    <%= setupData.filter(setup => setup.setup_status ===
                    'in_progress').length %>
                  </p>
                </div>
              </div>
            </div>

            <div
              class="bg-blue-50 border border-blue-200 rounded-lg p-4 lg:p-6"
            >
              <div class="flex items-center">
                <div class="p-2 lg:p-3 bg-blue-500 rounded-lg">
                  <svg
                    class="w-4 h-4 lg:w-6 lg:h-6 text-white"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"
                    ></path>
                  </svg>
                </div>
                <div class="ml-3 lg:ml-4">
                  <p class="text-sm lg:text-base text-blue-600 font-medium">
                    Total
                  </p>
                  <p
                    class="text-lg lg:text-2xl font-bold text-blue-900"
                    id="total-count"
                  >
                    <%= setupData.length %>
                  </p>
                </div>
              </div>
            </div>

            <div
              class="bg-gray-50 border border-gray-200 rounded-lg p-4 lg:p-6"
            >
              <div class="flex items-center">
                <div class="p-2 lg:p-3 bg-gray-500 rounded-lg">
                  <svg
                    class="w-4 h-4 lg:w-6 lg:h-6 text-white"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"
                    ></path>
                  </svg>
                </div>
                <div class="ml-3 lg:ml-4">
                  <p class="text-sm lg:text-base text-gray-600 font-medium">
                    Manual
                  </p>
                  <p
                    class="text-lg lg:text-2xl font-bold text-gray-900"
                    id="manual-count"
                  >
                    <%= setupData.filter(setup => setup.setup_status === 'manual').length %>
                  </p>
                </div>
              </div>
            </div>
          </div>

          <!-- Setup History Table -->
          <div
            class="bg-white rounded-lg border border-gray-200 overflow-hidden"
          >
            <div
              class="px-4 lg:px-6 py-4 border-b border-gray-200 flex justify-between items-center"
            >
              <h3 class="text-lg font-semibold text-gray-900">Setup History</h3>
              <div class="flex space-x-3">
                <button
                  id="Force Git Pull All Completed"
                  onclick="forceGitPullAllCompleted()"
                  class="inline-flex items-center px-3 py-2 border border-green-300 shadow-sm text-sm leading-4 font-medium rounded-md text-green-700 bg-green-50 hover:bg-green-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors duration-200"
                >
                  <svg
                    class="w-4 h-4 mr-2"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                    ></path>
                  </svg>
                  <span id="forceGitPullAllCompletedText">Force Git Pull All Completed</span>
                </button>
                <button
                  id="deleteAllErrorsBtn"
                  onclick="deleteAllErrors()"
                  class="inline-flex items-center px-3 py-2 border border-red-300 shadow-sm text-sm leading-4 font-medium rounded-md text-red-700 bg-red-50 hover:bg-red-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors duration-200"
                >
                  <svg
                    class="w-4 h-4 mr-2"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
                    ></path>
                  </svg>
                  <span id="deleteAllErrorsText">Delete All Errors</span>
                </button>
                <button
                  id="refreshBtn"
                  onclick="refreshData()"
                  class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
                >
                  <svg
                    id="refreshIcon"
                    class="w-4 h-4 mr-2"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                    ></path>
                  </svg>
                  <span id="refreshText">Refresh</span>
                </button>
              </div>
            </div>

            <div class="overflow-x-auto">
              <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                  <tr>
                    <th
                      class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Domain
                    </th>
                    <th
                      class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Status
                    </th>
                    <th
                      class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      PHP Version
                    </th>
                    <th
                      class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Framework
                    </th>
                    <th
                      class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Site Type
                    </th>
                    <th
                      class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Site User
                    </th>
                    <th
                      class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Site Details
                    </th>
                    <th
                      class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Database
                    </th>
                    <th
                      class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Repository
                    </th>
                    <th
                      class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Git Status
                    </th>
                    <th
                      class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Setup Steps & Retry
                    </th>
                    <th
                      class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Created
                    </th>
                    <th
                      class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                  <% setupData.forEach(function(setup) { %>
                  <tr class="hover:bg-gray-50" data-setup-id="<%= setup.id %>">
                    <td class="px-6 py-4 whitespace-nowrap">
                      <div class="flex items-center">
                        <div class="flex-shrink-0 h-8 w-8">
                          <div
                            class="h-8 w-8 rounded-full bg-blue-100 flex items-center justify-center"
                          >
                            <span class="text-sm font-medium text-blue-600"
                              ><%= setup.domain_name.charAt(0).toUpperCase()
                              %></span
                            >
                          </div>
                        </div>
                        <div class="ml-4">
                          <div class="text-sm font-medium text-gray-900 flex items-center">
                            <%= setup.domain_name %>
                            <% if (setup.siteExists !== undefined) { %>
                              <% if (setup.siteExists) { %>
                                <svg class="w-4 h-4 ml-2 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" title="Site exists">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                </svg>
                              <% } else { %>
                                <svg class="w-4 h-4 ml-2 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" title="Site not found">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                </svg>
                              <% } %>
                            <% } %>
                          </div>
                          <% if (setup.error_message) { %>
                          <div
                            class="text-xs text-red-500 truncate max-w-xs cursor-pointer hover:text-red-700 hover:underline error-details-link"
                            title="Click to view full error details"
                            data-domain="<%= setup.domain_name %>"
                            data-error="<%= setup.error_message || 'No error details available' %>"
                            data-setup-id="<%= setup.id %>"
                          >
                            <svg
                              class="w-3 h-3 inline mr-1"
                              fill="none"
                              stroke="currentColor"
                              viewBox="0 0 24 24"
                            >
                              <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z"
                              ></path>
                            </svg>
                            <%
                            // Smart error message truncation
                            let errorSummary = setup.error_message;
                            // Extract meaningful part of error message
                            if (errorSummary.includes('This value already exists')) {
                              errorSummary = 'Resource already exists';
                            } else if (errorSummary.includes('Connection refused')) {
                              errorSummary = 'Connection failed';
                            } else if (errorSummary.includes('Authentication failed')) {
                              errorSummary = 'Authentication error';
                            } else if (errorSummary.includes('Command failed')) {
                              errorSummary = 'Command execution failed';
                            } else if (errorSummary.includes('timeout')) {
                              errorSummary = 'Operation timeout';
                            } else if (errorSummary.includes('ENOTFOUND')) {
                              errorSummary = 'DNS resolution failed';
                            } else {
                              // Take first meaningful line, remove newlines
                              errorSummary = errorSummary.split('\n')[0].trim();
                              if (errorSummary.length > 50) {
                                errorSummary = errorSummary.substring(0, 47) + '...';
                              }
                            }
                            %>
                            <%= errorSummary %>
                          </div>
                          <% } %>
                        </div>
                      </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <% if (setup.setup_status === 'completed') { %>
                      <span
                        class="px-2 flex items-center text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800"
                      >
                        <svg
                          class="w-3 h-3 mr-1"
                          fill="currentColor"
                          viewBox="0 0 20 20"
                        >
                          <path
                            fill-rule="evenodd"
                            d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                            clip-rule="evenodd"
                          ></path>
                        </svg>
                        Completed
                      </span>
                      <% } else if (setup.setup_status === 'failed') { %>
                      <span
                        class="px-2 flex items-center text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800 cursor-pointer hover:bg-red-200 transition-colors duration-200 error-status"
                        data-domain="<%= setup.domain_name %>"
                        data-error="<%= setup.error_message || 'No error details available' %>"
                        data-setup-id="<%= setup.id %>"
                        title="Click to view full error details"
                      >
                        <svg
                          class="w-3 h-3 mr-1"
                          fill="currentColor"
                          viewBox="0 0 20 20"
                        >
                          <path
                            fill-rule="evenodd"
                            d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                            clip-rule="evenodd"
                          ></path>
                        </svg>
                        Failed
                        <svg
                          class="w-3 h-3 ml-1"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                          ></path>
                        </svg>
                      </span>
                      <% } else if (setup.setup_status === 'manual') { %>
                      <span
                        class="px-2 flex items-center text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800"
                      >
                        <svg
                          class="w-3 h-3 mr-1"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"
                          ></path>
                        </svg>
                        Manual
                      </span>
                      <% } else { %>
                      <span
                        class="px-2 flex items-center text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800"
                      >
                        <svg
                          class="w-3 h-3 mr-1 animate-spin"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                          ></path>
                        </svg>
                        In Progress
                      </span>
                      <% } %>
                    </td>
                    <td
                      class="px-6 py-4 whitespace-nowrap text-sm text-gray-900"
                    >
                      <span
                        class="px-2 py-1 text-xs font-medium bg-purple-100 text-purple-800 rounded"
                      >
                        PHP <%= setup.php_version %>
                      </span>
                    </td>
                    <td
                      class="px-6 py-4 whitespace-nowrap text-sm text-gray-900"
                    >
                      <span
                        class="px-2 py-1 text-xs font-medium bg-red-100 text-red-800 rounded"
                      >
                        <%= setup.vhost_template %>
                      </span>
                    </td>
                    <td
                      class="px-6 py-4 whitespace-nowrap text-sm text-gray-900"
                    >
                      <% if (setup.siteType) { %>
                        <div class="flex flex-col space-y-1">
                          <span class="px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800 rounded">
                            <%= setup.siteType %>
                          </span>
                          <% if (setup.siteFramework) { %>
                            <span class="px-2 py-1 text-xs font-medium bg-green-100 text-green-800 rounded">
                              <%= setup.siteFramework %>
                            </span>
                          <% } %>
                        </div>
                      <% } else { %>
                        <span class="text-gray-400">-</span>
                      <% } %>
                    </td>
                    <td
                      class="px-6 py-4 whitespace-nowrap text-sm text-gray-500"
                    >
                      <% if (setup.siteUser && setup.siteUserFromDB) { %>
                        <% if (setup.siteUser === setup.siteUserFromDB) { %>
                          <div class="text-sm font-medium text-gray-900">
                            <%= setup.siteUser %>
                          </div>
                        <% } else { %>
                          <div class="text-sm font-medium text-gray-900">
                            <%= setup.siteUser %>
                          </div>
                          <div class="text-xs text-gray-500">
                            DB: <%= setup.siteUserFromDB %>
                          </div>
                        <% } %>
                      <% } else if (setup.siteUser) { %>
                        <div class="text-sm font-medium text-gray-900">
                          <%= setup.siteUser %>
                        </div>
                      <% } else if (setup.siteUserFromDB) { %>
                        <div class="text-sm font-medium text-gray-900">
                          <%= setup.siteUserFromDB %>
                        </div>
                        <div class="text-xs text-red-500">
                          Site not found
                        </div>
                      <% } else { %>
                        <span class="text-gray-400">-</span>
                      <% } %>
                    </td>
                    <td
                      class="px-6 py-4 whitespace-nowrap text-sm text-gray-500"
                    >
                      <% if (setup.siteExists) { %>
                        <div class="flex flex-col space-y-1">
                          <% if (setup.siteSSL) { %>
                            <span class="px-2 py-1 text-xs font-medium bg-green-100 text-green-800 rounded flex items-center">
                              <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                              </svg>
                              SSL
                            </span>
                          <% } %>
                          <% if (setup.siteSize) { %>
                            <span class="px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800 rounded">
                              <%= formatFileSize(setup.siteSize) %>
                            </span>
                          <% } %>
                          <% if (setup.sitePath) { %>
                            <span class="text-xs text-gray-500 truncate max-w-xs" title="<%= setup.sitePath %>">
                              <%= setup.sitePath %>
                            </span>
                          <% } %>
                        </div>
                      <% } else { %>
                        <span class="text-gray-400">-</span>
                      <% } %>
                    </td>
                    <td
                      class="px-6 py-4 whitespace-nowrap text-sm text-gray-500"
                    >
                      <% if (setup.database_name) { %>
                      <div class="text-xs">
                        <a
                          href="#"
                          onclick="openPhpMyAdmin('<%= setup.domain_name %>', '<%= setup.site_user %>','<%= setup.database_user_name %>','<%= setup.database_password %>')"
                          class="font-medium text-blue-600 hover:text-blue-900 hover:underline cursor-pointer inline-flex items-center"
                          title="Click to open in phpMyAdmin"
                        >
                          <%= setup.database_name %>
                          <svg
                            class="w-3 h-3 ml-1"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                          >
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-width="2"
                              d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
                            ></path>
                          </svg>
                        </a>
                        <div class="text-gray-400">
                          <%= setup.database_user_name %>
                        </div>
                      </div>
                      <% } else { %>
                      <span class="text-gray-400">-</span>
                      <% } %>
                    </td>
                    <td
                      class="px-6 py-4 whitespace-nowrap text-sm text-gray-500"
                    >
                      <% if (setup.repository_url) { %>
                      <div class="text-xs">
                        <a
                          href="<%= setup.repository_url %>"
                          target="_blank"
                          class="font-medium text-blue-600 hover:text-blue-900 hover:underline cursor-pointer inline-flex items-center"
                          title="Open repository"
                        >
                          <%= setup.repository_url.replace(/^https?:\/\/(www\.)?/, '').replace(/\.git$/, '') %>
                          <svg
                            class="w-3 h-3 ml-1"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                          >
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-width="2"
                              d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
                            ></path>
                          </svg>
                        </a>
                      </div>
                      <% } else { %>
                      <span class="text-gray-400">-</span>
                      <% } %>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm">
                      <% if (setup.setup_status === 'completed' && setup.gitStatus) { %>
                        <% if (setup.gitStatus === 'up-to-date') { %>
                          <span class="px-2 py-1 text-xs font-medium bg-green-100 text-green-800 rounded flex items-center">
                            <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                            </svg>
                            Up to date
                          </span>
                        <% } else if (setup.gitStatus === 'need-pull') { %>
                          <button 
                            onclick="gitPull('<%= setup.siteUser %>', '<%= setup.domain_name %>')"
                            class="px-2 py-1 text-xs font-medium bg-yellow-100 text-yellow-800 rounded flex items-center hover:bg-yellow-200 transition-colors duration-200"
                          >
                            <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path>
                            </svg>
                            Pull needed
                          </button>
                        <% } else if (setup.gitStatus === 'need-push') { %>
                          <span class="px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800 rounded flex items-center">
                            <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12"></path>
                            </svg>
                            Push needed
                          </span>
                        <% } else if (setup.gitStatus === 'diverged') { %>
                          <span class="px-2 py-1 text-xs font-medium bg-red-100 text-red-800 rounded flex items-center">
                            <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                            </svg>
                            Diverged
                          </span>
                        <% } else if (setup.gitStatus === 'not-git') { %>
                          <span class="px-2 py-1 text-xs font-medium bg-gray-100 text-gray-800 rounded flex items-center">
                            <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                            Not Git
                          </span>
                        <% } else if (setup.gitStatus === 'error') { %>
                          <span class="px-2 py-1 text-xs font-medium bg-red-100 text-red-800 rounded flex items-center">
                            <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                            </svg>
                            Error
                          </span>
                        <% } %>
                      <% } else { %>
                        <span class="text-gray-400">-</span>
                      <% } %>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <div class="space-y-2">
                        <!-- Step 1: Site Created -->
                        <div class="flex items-center justify-between py-1">
                          <div class="flex items-center">
                            <% if (setup.site_created) { %>
                            <div
                              class="w-4 h-4 bg-blue-500 rounded-full flex items-center justify-center mr-2"
                              title="Site Created"
                            >
                              <svg
                                class="w-2 h-2 text-white"
                                fill="currentColor"
                                viewBox="0 0 20 20"
                              >
                                <path
                                  fill-rule="evenodd"
                                  d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                                  clip-rule="evenodd"
                                />
                              </svg>
                            </div>
                            <% } else { %>
                            <div
                              class="w-4 h-4 bg-gray-300 rounded-full mr-2"
                              title="Site Not Created"
                            ></div>
                            <% } %>
                            <span class="text-xs text-gray-600"
                              >Site Created</span
                            >
                          </div>
                          <% if (!setup.site_created && (setup.setup_status ===
                          'failed' || setup.setup_status === 'completed')) { %>
                          <button
                            onclick="retryStep('<%= setup.id %>', 'site_created', '<%= setup.domain_name %>')"
                            class="text-xs px-2 py-1 bg-blue-50 text-blue-600 hover:bg-blue-100 rounded border border-blue-200 transition-colors duration-200"
                            title="Retry site creation step"
                          >
                            <svg
                              class="w-3 h-3 inline mr-1"
                              fill="none"
                              stroke="currentColor"
                              viewBox="0 0 24 24"
                            >
                              <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                              ></path>
                            </svg>
                            Retry
                          </button>
                          <% } %>
                        </div>

                        <!-- Step 2: Database Created -->
                        <div class="flex items-center justify-between py-1">
                          <div class="flex items-center">
                            <% if (setup.database_created) { %>
                            <div
                              class="w-4 h-4 bg-green-500 rounded flex items-center justify-center mr-2"
                              title="Database Created"
                            >
                              <svg
                                class="w-2 h-2 text-white"
                                fill="currentColor"
                                viewBox="0 0 20 20"
                              >
                                <path
                                  fill-rule="evenodd"
                                  d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                                  clip-rule="evenodd"
                                />
                              </svg>
                            </div>
                            <% } else { %>
                            <div
                              class="w-4 h-4 bg-gray-300 rounded mr-2"
                              title="Database Not Created"
                            ></div>
                            <% } %>
                            <span class="text-xs text-gray-600"
                              >Database Created</span
                            >
                          </div>
                          <% if (!setup.database_created && (setup.setup_status
                          === 'failed' || setup.setup_status === 'completed')) {
                          %>
                          <button
                            onclick="retryStep('<%= setup.id %>', 'database_created', '<%= setup.domain_name %>')"
                            class="text-xs px-2 py-1 bg-green-50 text-green-600 hover:bg-green-100 rounded border border-green-200 transition-colors duration-200"
                            title="Retry database creation step"
                          >
                            <svg
                              class="w-3 h-3 inline mr-1"
                              fill="none"
                              stroke="currentColor"
                              viewBox="0 0 24 24"
                            >
                              <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                              ></path>
                            </svg>
                            Retry
                          </button>
                          <% } %>
                        </div>

                        <!-- Step 3: SSH Keys Copied -->
                        <div class="flex items-center justify-between py-1">
                          <div class="flex items-center">
                            <% if (setup.ssh_keys_copied) { %>
                            <div
                              class="w-4 h-4 bg-purple-500 rounded-full flex items-center justify-center mr-2"
                              title="SSH Keys Copied"
                            >
                              <svg
                                class="w-2 h-2 text-white"
                                fill="currentColor"
                                viewBox="0 0 20 20"
                              >
                                <path
                                  fill-rule="evenodd"
                                  d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                                  clip-rule="evenodd"
                                />
                              </svg>
                            </div>
                            <% } else { %>
                            <div
                              class="w-4 h-4 bg-gray-300 rounded-full mr-2"
                              title="SSH Keys Not Copied"
                            ></div>
                            <% } %>
                            <span class="text-xs text-gray-600"
                              >SSH Keys Copied</span
                            >
                          </div>
                          <% if (!setup.ssh_keys_copied && (setup.setup_status
                          === 'failed' || setup.setup_status === 'completed')) {
                          %>
                          <button
                            onclick="retryStep('<%= setup.id %>', 'ssh_keys_copied', '<%= setup.domain_name %>')"
                            class="text-xs px-2 py-1 bg-purple-50 text-purple-600 hover:bg-purple-100 rounded border border-purple-200 transition-colors duration-200"
                            title="Retry SSH keys copy step"
                          >
                            <svg
                              class="w-3 h-3 inline mr-1"
                              fill="none"
                              stroke="currentColor"
                              viewBox="0 0 24 24"
                            >
                              <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                              ></path>
                            </svg>
                            Retry
                          </button>
                          <% } %>
                        </div>

                        <!-- Step 4: Repository Cloned -->
                        <div class="flex items-center justify-between py-1">
                          <div class="flex items-center">
                            <% if (setup.repository_cloned) { %>
                            <div
                              class="w-4 h-4 bg-orange-500 rounded flex items-center justify-center mr-2"
                              title="Repository Cloned"
                            >
                              <svg
                                class="w-2 h-2 text-white"
                                fill="currentColor"
                                viewBox="0 0 20 20"
                              >
                                <path
                                  fill-rule="evenodd"
                                  d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                                  clip-rule="evenodd"
                                />
                              </svg>
                            </div>
                            <% } else { %>
                            <div
                              class="w-4 h-4 bg-gray-300 rounded mr-2"
                              title="Repository Not Cloned"
                            ></div>
                            <% } %>
                            <span class="text-xs text-gray-600"
                              >Repository Cloned</span
                            >
                          </div>
                          <% if (!setup.repository_cloned && (setup.setup_status
                          === 'failed' || setup.setup_status === 'completed') &&
                          setup.repository_url) { %>
                          <button
                            onclick="retryStep('<%= setup.id %>', 'repository_cloned', '<%= setup.domain_name %>')"
                            class="text-xs px-2 py-1 bg-orange-50 text-orange-600 hover:bg-orange-100 rounded border border-orange-200 transition-colors duration-200"
                            title="Retry repository clone step"
                          >
                            <svg
                              class="w-3 h-3 inline mr-1"
                              fill="none"
                              stroke="currentColor"
                              viewBox="0 0 24 24"
                            >
                              <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                              ></path>
                            </svg>
                            Retry
                          </button>
                          <% } %>
                        </div>

                        <!-- Step 5: Environment Configured -->
                        <div class="flex items-center justify-between py-1">
                          <div class="flex items-center">
                            <% if (setup.env_configured) { %>
                            <div
                              class="w-4 h-4 bg-teal-500 rounded-full flex items-center justify-center mr-2"
                              title="Environment Configured"
                            >
                              <svg
                                class="w-2 h-2 text-white"
                                fill="currentColor"
                                viewBox="0 0 20 20"
                              >
                                <path
                                  fill-rule="evenodd"
                                  d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                                  clip-rule="evenodd"
                                />
                              </svg>
                            </div>
                            <% } else { %>
                            <div
                              class="w-4 h-4 bg-gray-300 rounded-full mr-2"
                              title="Environment Not Configured"
                            ></div>
                            <% } %>
                            <span class="text-xs text-gray-600"
                              >Environment Configured</span
                            >
                          </div>
                          <% if (!setup.env_configured && (setup.setup_status
                          === 'failed' || setup.setup_status === 'completed')) {
                          %>
                          <button
                            onclick="retryStep('<%= setup.id %>', 'env_configured', '<%= setup.domain_name %>')"
                            class="text-xs px-2 py-1 bg-teal-50 text-teal-600 hover:bg-teal-100 rounded border border-teal-200 transition-colors duration-200"
                            title="Retry environment configuration step"
                          >
                            <svg
                              class="w-3 h-3 inline mr-1"
                              fill="none"
                              stroke="currentColor"
                              viewBox="0 0 24 24"
                            >
                              <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                              ></path>
                            </svg>
                            Retry
                          </button>
                          <% } %>
                        </div>

                        <!-- Step 6: Laravel Setup Completed -->
                        <div class="flex items-center justify-between py-1">
                          <div class="flex items-center">
                            <% if (setup.laravel_setup_completed) { %>
                            <div
                              class="w-4 h-4 bg-red-500 rounded flex items-center justify-center mr-2"
                              title="Laravel Setup Completed"
                            >
                              <svg
                                class="w-2 h-2 text-white"
                                fill="currentColor"
                                viewBox="0 0 20 20"
                              >
                                <path
                                  fill-rule="evenodd"
                                  d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                                  clip-rule="evenodd"
                                />
                              </svg>
                            </div>
                            <% } else { %>
                            <div
                              class="w-4 h-4 bg-gray-300 rounded mr-2"
                              title="Laravel Setup Not Completed"
                            ></div>
                            <% } %>
                            <span class="text-xs text-gray-600"
                              >Laravel Setup Completed</span
                            >
                          </div>
                          <% if (!setup.laravel_setup_completed &&
                          (setup.setup_status === 'failed' || setup.setup_status
                          === 'completed')) { %>
                          <button
                            onclick="retryStep('<%= setup.id %>', 'laravel_setup_completed', '<%= setup.domain_name %>')"
                            class="text-xs px-2 py-1 bg-red-50 text-red-600 hover:bg-red-100 rounded border border-red-200 transition-colors duration-200"
                            title="Retry Laravel setup commands step"
                          >
                            <svg
                              class="w-3 h-3 inline mr-1"
                              fill="none"
                              stroke="currentColor"
                              viewBox="0 0 24 24"
                            >
                              <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                              ></path>
                            </svg>
                            Retry
                          </button>
                          <% } %>
                        </div>
                      </div>
                    </td>
                    <td
                      class="px-6 py-4 whitespace-nowrap text-sm text-gray-500"
                    >
                      <%= new Date(setup.created_at).toLocaleDateString() %>
                      <div class="text-xs text-gray-400">
                        <%= new Date(setup.created_at).toLocaleTimeString() %>
                      </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <div class="flex flex-col space-y-2">
                        <button
                          onclick="performGitPull('<%= setup.site_user %>', '<%= setup.domain_name %>')"
                          class="git-pull-btn text-green-600 hover:text-green-900 bg-green-50 hover:bg-green-100 px-3 py-1 rounded-md transition-colors duration-200"
                          title="Force git pull"
                          data-site-user="<%= setup.site_user %>"
                          data-domain-name="<%= setup.domain_name %>"
                        >
                          <svg
                            class="w-4 h-4 inline mr-1"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                          >
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-width="2"
                              d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12"
                            ></path>
                          </svg>
                          <span class="git-pull-text">Force git pull</span>
                        </button>
                        <button
                          onclick="checkCronjobPermissions('<%= setup.site_user %>')"
                          class="cronjob-check-btn text-blue-600 hover:text-blue-900 bg-blue-50 hover:bg-blue-100 px-3 py-1 rounded-md transition-colors duration-200"
                          title="Check cronjob permissions"
                          data-site-user="<%= setup.site_user %>"
                        >
                          <svg
                            class="w-4 h-4 inline mr-1"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                          >
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-width="2"
                              d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                            ></path>
                          </svg>
                          <span class="cronjob-check-text">Check Cron Permissions</span>
                        </button>
                        <button
                          onclick="grantCronjobPermissions('<%= setup.site_user %>')"
                          class="grant-cronjob-btn text-orange-600 hover:text-orange-900 bg-orange-50 hover:bg-orange-100 px-3 py-1 rounded-md transition-colors duration-200"
                          title="Grant cronjob permissions"
                          data-site-user="<%= setup.site_user %>"
                        >
                          <svg
                            class="w-4 h-4 inline mr-1"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                          >
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-width="2"
                              d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"
                            ></path>
                          </svg>
                          <span class="grant-cronjob-text">Grant Permissions</span>
                        </button>
                        <button
                          class="delete-btn text-red-600 hover:text-red-900 bg-red-50 hover:bg-red-100 px-3 py-1 rounded-md transition-colors duration-200"
                          data-setup-id="<%= setup.id %>"
                          data-domain-name="<%= setup.domain_name %>"
                          data-setup-status="<%= setup.setup_status %>"
                          title="Delete setup record"
                        >
                          <svg
                            class="w-4 h-4 inline mr-1"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                          >
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-width="2"
                              d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
                            ></path>
                          </svg>
                          Delete
                        </button>
                      </div>
                    </td>
                  </tr>
                  <% }); %>
                  <% if (setupData.length === 0) { %>
                  <tr>
                    <td colspan="10" class="px-6 py-12 text-center">
                      <svg
                        class="mx-auto h-12 w-12 text-gray-400"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                        ></path>
                      </svg>
                      <h3 class="mt-2 text-sm font-medium text-gray-900">
                        No setup history
                      </h3>
                      <p class="mt-1 text-sm text-gray-500">
                        No Laravel setups have been performed yet.
                      </p>
                    </td>
                  </tr>
                  <% } %>
                </tbody>
              </table>
            </div>
          </div>

          <!-- Legend -->
          <div class="mt-6 bg-gray-50 rounded-lg p-4">
            <h4 class="text-sm font-medium text-gray-900 mb-3">
              Setup Steps Legend:
            </h4>
            <div
              class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-3 text-xs"
            >
              <div class="flex items-center">
                <div
                  class="w-4 h-4 bg-blue-500 rounded-full mr-2 flex items-center justify-center"
                >
                  <svg
                    class="w-2 h-2 text-white"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                  >
                    <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                    <path
                      fill-rule="evenodd"
                      d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z"
                      clip-rule="evenodd"
                    />
                  </svg>
                </div>
                <span class="text-gray-600">Site Created</span>
              </div>
              <div class="flex items-center">
                <div
                  class="w-4 h-4 bg-green-500 rounded mr-2 flex items-center justify-center"
                >
                  <svg
                    class="w-2 h-2 text-white"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                  >
                    <path
                      fill-rule="evenodd"
                      d="M3 4a1 1 0 011-1h4a1 1 0 010 2H6.414l2.293 2.293a1 1 0 11-1.414 1.414L5 6.414V8a1 1 0 01-2 0V4zm9 1a1 1 0 010-2h4a1 1 0 011 1v4a1 1 0 01-2 0V6.414l-2.293 2.293a1 1 0 11-1.414-1.414L13.586 5H12z"
                      clip-rule="evenodd"
                    />
                  </svg>
                </div>
                <span class="text-gray-600">Database Created</span>
              </div>
              <div class="flex items-center">
                <div
                  class="w-4 h-4 bg-purple-500 rounded-full mr-2 flex items-center justify-center"
                >
                  <svg
                    class="w-2 h-2 text-white"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                  >
                    <path
                      fill-rule="evenodd"
                      d="M18 8a6 6 0 01-7.743 5.743L10 14l-1 1-1 1H6v2H2v-4l4.257-4.257A6 6 0 1118 8zm-6-4a1 1 0 100 2 2 2 0 012 2 1 1 0 102 0 4 4 0 00-4-4z"
                      clip-rule="evenodd"
                    />
                  </svg>
                </div>
                <span class="text-gray-600">SSH Keys Copied</span>
              </div>
              <div class="flex items-center">
                <div
                  class="w-4 h-4 bg-orange-500 rounded mr-2 flex items-center justify-center"
                >
                  <svg
                    class="w-2 h-2 text-white"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                  >
                    <path
                      fill-rule="evenodd"
                      d="M12.316 3.051a1 1 0 01.633 1.265l-4 12a1 1 0 11-1.898-.632l4-12a1 1 0 011.265-.633zM5.707 6.293a1 1 0 010 1.414L3.414 10l2.293 2.293a1 1 0 11-1.414 1.414l-3-3a1 1 0 010-1.414l3-3a1 1 0 011.414 0zm8.586 0a1 1 0 011.414 0l3 3a1 1 0 010 1.414l-3 3a1 1 0 11-1.414-1.414L16.586 10l-2.293-2.293a1 1 0 010-1.414z"
                      clip-rule="evenodd"
                    />
                  </svg>
                </div>
                <span class="text-gray-600">Repository Cloned</span>
              </div>
              <div class="flex items-center">
                <div
                  class="w-4 h-4 bg-teal-500 rounded-full mr-2 flex items-center justify-center"
                >
                  <svg
                    class="w-2 h-2 text-white"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                  >
                    <path
                      fill-rule="evenodd"
                      d="M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z"
                      clip-rule="evenodd"
                    />
                  </svg>
                </div>
                <span class="text-gray-600">Environment Configured</span>
              </div>
              <div class="flex items-center">
                <div
                  class="w-4 h-4 bg-red-500 rounded mr-2 flex items-center justify-center"
                >
                  <svg
                    class="w-2 h-2 text-white"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                  >
                    <path
                      fill-rule="evenodd"
                      d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                      clip-rule="evenodd"
                    />
                  </svg>
                </div>
                <span class="text-gray-600">Laravel Setup Completed</span>
              </div>
            </div>
            <div class="mt-3 flex flex-wrap gap-4 text-xs text-gray-500">
              <div class="flex items-center">
                <span
                  class="w-3 h-3 bg-gray-300 rounded-full inline-block mr-2"
                ></span>
                <span>Not completed / Failed</span>
              </div>
              <div class="flex items-center">
                <div
                  class="w-3 h-3 bg-green-400 rounded-full mr-2 flex items-center justify-center"
                >
                  <svg
                    class="w-2 h-2 text-white"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                  >
                    <path
                      fill-rule="evenodd"
                      d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                      clip-rule="evenodd"
                    />
                  </svg>
                </div>
                <span>Successfully completed</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script>
      console.log("Setup History page loaded successfully");

      // Loading functions
      function showLoading(text = "Loading...", subtext = "Please wait") {
        const overlay = document.getElementById("loadingOverlay");
        const loadingText = document.getElementById("loadingText");
        const loadingSubtext = document.getElementById("loadingSubtext");

        loadingText.textContent = text;
        loadingSubtext.textContent = subtext;
        overlay.classList.remove("hidden");
        overlay.classList.add("flex");
      }

      function showLoadingWithProgress(
        text = "Loading...",
        subtext = "Please wait"
      ) {
        showLoading(text, subtext);
        const progressDiv = document.getElementById("loadingProgress");
        progressDiv.classList.remove("hidden");
        setProgress(0);
      }

      function setProgress(percent) {
        const progressBar = document.getElementById("progressBar");
        const progressText = document.getElementById("progressText");

        progressBar.style.width = `${percent}%`;
        progressText.textContent = `${Math.round(percent)}%`;
      }

      function hideLoading() {
        const overlay = document.getElementById("loadingOverlay");
        const progressDiv = document.getElementById("loadingProgress");

        overlay.classList.add("hidden");
        overlay.classList.remove("flex");
        progressDiv.classList.add("hidden");
        setProgress(0);
      }

      function showRefreshLoading() {
        document.getElementById("refreshLoading").classList.remove("hidden");
      }

      function hideRefreshLoading() {
        document.getElementById("refreshLoading").classList.add("hidden");
      }

      // Show loading on page load
      window.addEventListener("load", function () {
        // Hide initial loading after page is fully loaded
        setTimeout(() => {
          hideLoading();
          // Check if we need auto-refresh for in-progress setups
          checkForAutoRefresh();
        }, 500);
      });

      // Show loading initially
      showLoading(
        "Loading setup history...",
        "Fetching setup data from server"
      );

      // Refresh data function
      async function refreshData() {
        const refreshBtn = document.getElementById("refreshBtn");
        const refreshIcon = document.getElementById("refreshIcon");
        const refreshText = document.getElementById("refreshText");

        // Disable button and show loading state
        refreshBtn.disabled = true;
        refreshIcon.classList.add("animate-spin");
        refreshText.textContent = "Refreshing...";

        try {
          // Show refresh loading indicator
          showRefreshLoading();

          // Reload the page to fetch fresh data
          window.location.reload();
        } catch (error) {
          console.error("Error refreshing data:", error);
          showNotification(
            "Failed to refresh data. Please try again.",
            "error"
          );

          // Reset button state
          refreshBtn.disabled = false;
          refreshIcon.classList.remove("animate-spin");
          refreshText.textContent = "Refresh";
          hideRefreshLoading();
        }
      }

      // Auto refresh every 30 seconds for in-progress setups only (not for failed setups)
      function checkForAutoRefresh() {
        const inProgressSetups =
          document.querySelectorAll(".bg-yellow-100").length;
        const failedSetups = document.querySelectorAll(".bg-red-100").length;

        // Only auto-refresh if there are in-progress setups, don't auto-refresh for failed setups
        if (inProgressSetups > 0) {
          console.log(
            `Found ${inProgressSetups} in-progress setups, auto-refresh enabled`
          );
          setTimeout(() => {
            showRefreshLoading();
            setTimeout(() => {
              window.location.reload();
            }, 1000);
          }, 30000); // 30 seconds
        }
      }

      // Add event listeners for delete buttons
      document.addEventListener("DOMContentLoaded", function () {
        const deleteButtons = document.querySelectorAll(".delete-btn");
        deleteButtons.forEach((button) => {
          button.addEventListener("click", function () {
            const setupId = this.getAttribute("data-setup-id");
            const domainName = this.getAttribute("data-domain-name");
            const setupStatus = this.getAttribute("data-setup-status");
            deleteSetup(setupId, domainName, setupStatus);
          });
        });

        // Add event listeners for error status clicks
        const errorStatusElements = document.querySelectorAll(".error-status");
        errorStatusElements.forEach((element) => {
          element.addEventListener("click", function () {
            const domainName = this.getAttribute("data-domain");
            const errorMessage = this.getAttribute("data-error");
            const setupId = this.getAttribute("data-setup-id");
            showErrorModal(domainName, errorMessage, setupId);
          });
        });

        // Add event listeners for error details links in domain column
        const errorDetailsLinks = document.querySelectorAll(
          ".error-details-link"
        );
        errorDetailsLinks.forEach((element) => {
          element.addEventListener("click", function (e) {
            e.preventDefault();
            e.stopPropagation();
            const domainName = this.getAttribute("data-domain");
            const errorMessage = this.getAttribute("data-error");
            const setupId = this.getAttribute("data-setup-id");
            showErrorModal(domainName, errorMessage, setupId);
          });
        });
      });

      // Function to delete a setup record
      async function deleteSetup(setupId, domainName, setupStatus) {
        // Show confirmation dialog with options
        const result = await showDeleteConfirmation(domainName, setupStatus);
        if (!result.confirmed) {
          return;
        }

        try {
          // Show loading with progress during delete process
          const isCompleted = setupStatus === "completed";
          showLoadingWithProgress(
            `Deleting ${domainName}...`,
            isCompleted
              ? "Removing from database and CloudPanel..."
              : "Removing from database only (CloudPanel deletion skipped)..."
          );

          // Simulate progress for user feedback
          setProgress(20);

          const response = await fetch(`/sites/api/setup-history/${setupId}`, {
            method: "DELETE",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              deleteFromCloudPanel: result.deleteFromCloudPanel,
            }),
          });

          setProgress(70);
          const responseData = await response.json();
          setProgress(100);

          // Hide loading
          hideLoading();

          if (responseData.success) {
            // Show success message
            showNotification(responseData.message, "success");

            // Remove the row from the table
            const row = document.querySelector(
              `tr[data-setup-id="${setupId}"]`
            );
            if (row) {
              row.remove();
            } else {
              // Fallback: reload the page
              setTimeout(() => {
                window.location.reload();
              }, 1000);
            }

            // Update the stats
            updateStats();
          } else {
            showNotification(
              responseData.message || "Failed to delete setup record",
              "error"
            );
          }
        } catch (error) {
          console.error("Error deleting setup:", error);
          hideLoading();
          showNotification(
            "Failed to delete setup record. Please try again.",
            "error"
          );
        }
      }

      // Function to show delete confirmation dialog with options
      function showDeleteConfirmation(domainName, setupStatus) {
        return new Promise((resolve) => {
          // Create modal dialog
          const modal = document.createElement("div");
          modal.className =
            "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50";
          modal.innerHTML = `
                    <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
                        <div class="p-6">
                            <h3 class="text-lg font-semibold text-gray-900 mb-4">Delete Setup Record</h3>
                            <p class="text-gray-600 mb-4">
                                Are you sure you want to delete the setup record for <strong>"${domainName}"</strong>?
                            </p>
                            
                            ${
                              setupStatus === "completed"
                                ? `<div class="mb-4 p-3 bg-orange-50 border border-orange-200 rounded-lg">
                                <div class="flex items-start">
                                  <svg class="w-5 h-5 text-orange-600 mt-0.5 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                                  </svg>
                                  <div class="text-sm">
                                    <p class="font-medium text-orange-800">CloudPanel Site Deletion</p>
                                    <p class="text-orange-700 mt-1">Since the setup status is <strong>completed</strong>, the site will also be deleted from CloudPanel along with the database record.</p>
                                  </div>
                                </div>
                              </div>`
                                : `<div class="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                                <div class="flex items-start">
                                  <svg class="w-5 h-5 text-blue-600 mt-0.5 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                  </svg>
                                  <div class="text-sm">
                                    <p class="font-medium text-blue-800">Database Only Deletion</p>
                                    <p class="text-blue-700 mt-1">Since the setup status is <strong>${setupStatus}</strong>, only the database record will be deleted. CloudPanel site deletion will be skipped.</p>
                                  </div>
                                </div>
                              </div>`
                            }
                            
                            <div class="flex justify-end space-x-3">
                                <button type="button" class="cancel-btn px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                    Cancel
                                </button>
                                <button type="button" class="confirm-btn px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500">
                                    Delete
                                </button>
                            </div>
                        </div>
                    </div>
                `;

          document.body.appendChild(modal);

          // Handle cancel
          modal.querySelector(".cancel-btn").addEventListener("click", () => {
            document.body.removeChild(modal);
            resolve({ confirmed: false });
          });

          // Handle confirm
          modal.querySelector(".confirm-btn").addEventListener("click", () => {
            document.body.removeChild(modal);
            resolve({
              confirmed: true,
              deleteFromCloudPanel: true,
            });
          });

          // Handle click outside modal
          modal.addEventListener("click", (e) => {
            if (e.target === modal) {
              document.body.removeChild(modal);
              resolve({ confirmed: false });
            }
          });
        });
      }

      // Function to show notifications
      function showNotification(message, type = "info") {
        const notification = document.createElement("div");
        notification.className = `fixed top-4 right-4 px-6 py-3 rounded-lg shadow-lg z-50 animate-fade-in ${
          type === "success"
            ? "bg-green-500 text-white"
            : type === "error"
            ? "bg-red-500 text-white"
            : type === "warning"
            ? "bg-yellow-500 text-white"
            : "bg-blue-500 text-white"
        }`;
        notification.textContent = message;

        document.body.appendChild(notification);

        setTimeout(() => {
          notification.classList.remove("animate-fade-in");
          notification.classList.add("animate-fade-out");
          setTimeout(() => {
            document.body.removeChild(notification);
          }, 300);
        }, 3000);
      }

      // Function to update stats after deletion
      function updateStats() {
        const rows = document.querySelectorAll("tbody tr[data-setup-id]");
        let completed = 0,
          failed = 0,
          inProgress = 0;

        rows.forEach((row) => {
          const statusElement = row.querySelector(
            ".bg-green-100, .bg-red-100, .bg-yellow-100"
          );
          if (statusElement) {
            if (statusElement.classList.contains("bg-green-100")) {
              completed++;
            } else if (statusElement.classList.contains("bg-red-100")) {
              failed++;
            } else if (statusElement.classList.contains("bg-yellow-100")) {
              inProgress++;
            }
          }
        });

        // Update the display counts
        const completedCount = document.getElementById("completed-count");
        const failedCount = document.getElementById("failed-count");
        const progressCount = document.getElementById("progress-count");
        const totalCount = document.getElementById("total-count");

        if (completedCount) completedCount.textContent = completed;
        if (failedCount) failedCount.textContent = failed;
        if (progressCount) progressCount.textContent = inProgress;
        if (totalCount)
          totalCount.textContent = completed + failed + inProgress;
      }

      // Function to show error modal with full error details
      function showErrorModal(domainName, errorMessage, setupId = null) {
        return new Promise((resolve) => {
          // Create modal dialog
          const modal = document.createElement("div");
          modal.className =
            "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4";

          // Enhanced error message formatting for consistent display across environments
          const formattedError = errorMessage
            ? formatErrorMessage(errorMessage)
            : "No error details available";

          // Function to format error messages consistently
          function formatErrorMessage(rawError) {
            if (!rawError) return "No error details available";

            // Escape HTML characters first
            let escaped = rawError.replace(/</g, "&lt;").replace(/>/g, "&gt;");

            // Split by newlines and process each line
            return escaped
              .split(/\r?\n/)
              .map((line) => {
                line = line.trim();
                if (!line) return "";

                // Handle different error formats

                // Format 1: Field validation errors (e.g., "domainName: This value already exists.")
                if (line.match(/^\w+:\s*This value already exists\.?$/)) {
                  const [field, message] = line.split(":", 2);
                  return `<span class="text-red-600 font-semibold">${field.trim()}:</span> <span class="text-red-500">${message.trim()}</span>`;
                }

                // Format 2: CloudPanel API errors (e.g., "Error: Domain already exists")
                if (line.match(/^Error:\s*.+/i)) {
                  return `<span class="text-red-600 font-semibold">Error:</span> <span class="text-red-500">${line.replace(
                    /^Error:\s*/i,
                    ""
                  )}</span>`;
                }

                // Format 3: Command execution errors (e.g., "Command failed: ...")
                if (line.match(/^Command failed:\s*.+/i)) {
                  return `<span class="text-red-600 font-semibold">Command Failed:</span> <span class="text-red-500">${line.replace(
                    /^Command failed:\s*/i,
                    ""
                  )}</span>`;
                }

                // Format 4: JSON error responses
                try {
                  const jsonError = JSON.parse(line);
                  if (jsonError.error || jsonError.message) {
                    return `<span class="text-red-600 font-semibold">API Error:</span> <span class="text-red-500">${
                      jsonError.error || jsonError.message
                    }</span>`;
                  }
                } catch (e) {
                  // Not JSON, continue with other formats
                }

                // Format 5: Stack trace lines (make them smaller and gray)
                if (
                  line.match(/^\s*at\s+.+/) ||
                  line.match(/^\s*\w+\.\w+\(.+\)/)
                ) {
                  return `<span class="text-xs text-gray-500">${line}</span>`;
                }

                // Format 6: File paths (make them smaller)
                if (line.match(/^\/[\w\/\-\.]+/)) {
                  return `<span class="text-xs text-gray-600">${line}</span>`;
                }

                // Default: regular error text
                return `<span class="text-gray-800">${line}</span>`;
              })
              .filter((line) => line.length > 0)
              .join("<br>");
          }

          // Function to get environment-specific troubleshooting tips
          function getTroubleshootingTips(errorMessage) {
            const tips = [];

            // Check error patterns and provide specific tips
            if (
              errorMessage &&
              errorMessage.includes("This value already exists")
            ) {
              tips.push(
                "<li><strong>Resource Conflict:</strong> The domain name or site user already exists in CloudPanel</li>"
              );
              tips.push(
                "<li>Try using a different domain name or site user name</li>"
              );
              tips.push(
                "<li>Check if the domain was previously created and delete it before retrying</li>"
              );
            } else if (
              errorMessage &&
              errorMessage.includes("Connection refused")
            ) {
              tips.push(
                "<li><strong>Connection Issue:</strong> Unable to connect to CloudPanel API</li>"
              );
              tips.push("<li>Check if CloudPanel service is running</li>");
              tips.push(
                "<li>Verify network connectivity and firewall settings</li>"
              );
            } else if (
              errorMessage &&
              errorMessage.includes("Authentication failed")
            ) {
              tips.push(
                "<li><strong>Authentication Error:</strong> CloudPanel credentials are invalid</li>"
              );
              tips.push(
                "<li>Check CloudPanel username and password in environment variables</li>"
              );
              tips.push(
                "<li>Verify CloudPanel user has sufficient permissions</li>"
              );
            } else if (
              errorMessage &&
              errorMessage.includes("Command failed")
            ) {
              tips.push(
                "<li><strong>Command Execution Error:</strong> A system command failed to execute</li>"
              );
              tips.push("<li>Check server resources (disk space, memory)</li>");
              tips.push("<li>Verify file permissions and ownership</li>");
            } else if (
              errorMessage &&
              (errorMessage.includes("ENOTFOUND") ||
                errorMessage.includes("DNS"))
            ) {
              tips.push(
                "<li><strong>DNS Resolution Error:</strong> Unable to resolve domain name</li>"
              );
              tips.push("<li>Check domain DNS configuration</li>");
              tips.push("<li>Verify domain is pointing to correct server</li>");
            } else if (errorMessage && errorMessage.includes("timeout")) {
              tips.push(
                "<li><strong>Timeout Error:</strong> Operation took too long to complete</li>"
              );
              tips.push("<li>Check server performance and load</li>");
              tips.push(
                "<li>Retry the operation or increase timeout settings</li>"
              );
            } else {
              // Generic troubleshooting tips
              tips.push(
                "<li>Check if the domain name is valid and properly configured</li>"
              );
              tips.push(
                "<li>Verify that the site user has proper permissions</li>"
              );
              tips.push("<li>Ensure database credentials are correct</li>");
            }

            // Common tips for all scenarios
            tips.push(
              "<li>Check if the repository URL is accessible (if using Git)</li>"
            );
            tips.push(
              "<li>Review server logs for additional error details</li>"
            );

            // Environment-specific tips
            const isProduction =
              !window.location.hostname.includes("localhost") &&
              !window.location.hostname.includes("127.0.0.1");
            if (isProduction) {
              tips.push(
                "<li><strong>Production Environment:</strong> Contact system administrator if issue persists</li>"
              );
            } else {
              tips.push(
                "<li><strong>Development Environment:</strong> Check VPS connection and credentials</li>"
              );
            }

            return tips.join("");
          }

          modal.innerHTML = `
                    <div class="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[80vh] overflow-hidden">
                        <div class="bg-red-50 border-b border-red-200 px-6 py-4">
                            <div class="flex items-center justify-between">
                                <div class="flex items-center">
                                    <div class="p-2 bg-red-100 rounded-lg mr-3">
                                        <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                                        </svg>
                                    </div>
                                    <div>
                                        <h3 class="text-lg font-semibold text-red-900">Setup Failed</h3>
                                        <p class="text-sm text-red-700">Domain: <strong>${domainName}</strong></p>
                                    </div>
                                </div>
                                <button type="button" class="close-btn text-red-400 hover:text-red-600 focus:outline-none">
                                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                    </svg>
                                </button>
                            </div>
                        </div>
                        
                        <div class="p-6 overflow-y-auto max-h-96">
                            <h4 class="text-sm font-medium text-gray-900 mb-3">Error Details:</h4>
                            <div class="bg-gray-50 border border-gray-200 rounded-lg p-4">
                                <div class="text-sm text-gray-800 leading-relaxed">${formattedError}</div>
                            </div>
                            
                            <div class="mt-4 bg-blue-50 border border-blue-200 rounded-lg p-4">
                                <div class="flex items-start">
                                    <svg class="w-5 h-5 text-blue-600 mt-0.5 mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                    <div class="text-sm text-blue-800">
                                        <p class="font-medium mb-1">Troubleshooting Tips:</p>
                                        <ul class="list-disc list-inside space-y-1 text-blue-700">
                                            ${getTroubleshootingTips(
                                              errorMessage
                                            )}
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="bg-gray-50 border-t border-gray-200 px-6 py-4 flex justify-between items-center">
                            <div class="flex space-x-3">
                                <button type="button" class="copy-error-btn inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                                    </svg>
                                    Copy Error
                                </button>
                                ${
                                  setupId
                                    ? `<button type="button" class="retry-setup-btn inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500" data-setup-id="${setupId}" data-domain-name="${domainName}">
                                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                                    </svg>
                                    Retry Setup
                                  </button>`
                                    : `<button type="button" class="new-setup-btn inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                    </svg>
                                    New Setup
                                  </button>`
                                }
                            </div>
                            <button type="button" class="close-btn px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-500">
                                Close
                            </button>
                        </div>
                    </div>
                `;

          document.body.appendChild(modal);

          // Handle close buttons
          const closeButtons = modal.querySelectorAll(".close-btn");
          closeButtons.forEach((btn) => {
            btn.addEventListener("click", () => {
              document.body.removeChild(modal);
              resolve();
            });
          });

          // Handle copy error button
          const copyBtn = modal.querySelector(".copy-error-btn");
          copyBtn.addEventListener("click", async () => {
            try {
              await navigator.clipboard.writeText(errorMessage);
              showNotification("Error details copied to clipboard", "success");
            } catch (err) {
              // Fallback for older browsers
              const textArea = document.createElement("textarea");
              textArea.value = errorMessage;
              document.body.appendChild(textArea);
              textArea.select();
              document.execCommand("copy");
              document.body.removeChild(textArea);
              showNotification("Error details copied to clipboard", "success");
            }
          });

          // Handle retry setup button
          const retryBtn = modal.querySelector(".retry-setup-btn");
          if (retryBtn) {
            retryBtn.addEventListener("click", async () => {
              const setupId = retryBtn.getAttribute("data-setup-id");
              const domainName = retryBtn.getAttribute("data-domain-name");

              document.body.removeChild(modal);

              if (setupId) {
                // Show confirmation for retry
                const retryConfirmed = await showRetryConfirmation(domainName);
                if (retryConfirmed) {
                  await retrySetup(setupId, domainName);
                }
              } else {
                showNotification("Redirecting to setup page...", "info");
                setTimeout(() => {
                  window.location.href = "/docs#setup";
                }, 1000);
              }
            });
          }

          // Handle new setup button
          const newSetupBtn = modal.querySelector(".new-setup-btn");
          if (newSetupBtn) {
            newSetupBtn.addEventListener("click", () => {
              document.body.removeChild(modal);
              showNotification("Redirecting to setup page...", "info");
              setTimeout(() => {
                window.location.href = "/docs#setup";
              }, 1000);
            });
          }

          // Handle click outside modal
          modal.addEventListener("click", (e) => {
            if (e.target === modal) {
              document.body.removeChild(modal);
              resolve();
            }
          });

          // Handle ESC key
          const handleEsc = (e) => {
            if (e.key === "Escape") {
              document.body.removeChild(modal);
              document.removeEventListener("keydown", handleEsc);
              resolve();
            }
          };
          document.addEventListener("keydown", handleEsc);
        });
      }

      // Function to open phpMyAdmin for a specific database
      function openPhpMyAdmin(
        domainName,
        siteUser,
        databaseUser,
        databasePassword
      ) {
        try {
          const protocol = "https:"; // Use https by default
          const hostname =
            "<%= process.env.NODE_ENV === 'development' ? process.env.VPS_HOST : '' %>" ||
            window.location.hostname;

          // CloudPanel default ports: 8443 for HTTPS, 8080 for HTTP
          let port;
          if (protocol === "https:") {
            port = "8443";
          }

          // Encode credentials for URL safety
          const encodedUser = encodeURIComponent(databaseUser);
          const encodedPassword = encodeURIComponent(databasePassword);

          // Try CloudPanel's standard phpMyAdmin URL first
          const phpMyAdminUrl = `${protocol}//${hostname}:${port}/pma/${domainName}/${siteUser}`;
          console.log(phpMyAdminUrl);
          // Show notification to user
          showNotification(`Opening phpMyAdmin for ${domainName}...`, "info");

          // Open in new tab/window
          const newWindow = window.open(
            phpMyAdminUrl,
            "_blank",
            "noopener,noreferrer"
          );

          if (!newWindow) {
            // Popup blocked - show alternative options
            showPhpMyAdminAlternatives(domainName, siteUser, phpMyAdminUrl);
          } else {
            // Show helpful information about database access
            setTimeout(() => {
              showNotification(
                `Database: ${domainName.replace(
                  /[^a-zA-Z0-9]/g,
                  "_"
                )} | User: Check your database credentials`,
                "info"
              );
            }, 1000);
          }

          console.log(
            `Opening phpMyAdmin for domain: ${domainName}, user: ${siteUser}`
          );
        } catch (error) {
          console.error("Error opening phpMyAdmin:", error);
          showNotification(
            "Failed to open phpMyAdmin. Please try manually.",
            "error"
          );
        }
      }

      // Function to show alternative phpMyAdmin access options when popup is blocked
      function showPhpMyAdminAlternatives(domainName, siteUser, phpMyAdminUrl) {
        const modal = document.createElement("div");
        modal.className =
          "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4";

        modal.innerHTML = `
                <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
                    <div class="bg-blue-50 border-b border-blue-200 px-6 py-4">
                        <div class="flex items-center">
                            <div class="p-2 bg-blue-100 rounded-lg mr-3">
                                <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 7v10c0 2.21 1.79 4 4 4h8c0-2.21-1.79-4-4-4H4V7z"></path>
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 3v6M2 3h16"></path>
                                </svg>
                            </div>
                            <div>
                                <h3 class="text-lg font-semibold text-blue-900">phpMyAdmin Access</h3>
                                <p class="text-sm text-blue-700">Popup was blocked</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="p-6">
                        <p class="text-gray-600 mb-4">Please enable popups for this site or use one of the options below:</p>
                        
                        <div class="space-y-3">
                            <button onclick="window.open('${phpMyAdminUrl}', '_blank')" 
                                    class="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200">
                                Open phpMyAdmin Manually
                            </button>
                            
                            <button onclick="copyToClipboard('${phpMyAdminUrl}')" 
                                    class="w-full px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors duration-200">
                                Copy phpMyAdmin URL
                            </button>
                        </div>
                    </div>
                    
                    <div class="bg-gray-50 border-t border-gray-200 px-6 py-4 flex justify-end">
                        <button onclick="this.closest('.fixed').remove()" 
                                class="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 transition-colors duration-200">
                            Close
                        </button>
                    </div>
                </div>
            `;

        document.body.appendChild(modal);

        // Handle click outside modal
        modal.addEventListener("click", (e) => {
          if (e.target === modal) {
            document.body.removeChild(modal);
          }
        });
      }

      // Helper function to copy text to clipboard
      async function copyToClipboard(text) {
        try {
          await navigator.clipboard.writeText(text);
          showNotification("URL copied to clipboard!", "success");
        } catch (err) {
          // Fallback for older browsers
          const textArea = document.createElement("textarea");
          textArea.value = text;
          document.body.appendChild(textArea);
          textArea.select();
          document.execCommand("copy");
          document.body.removeChild(textArea);
          showNotification("URL copied to clipboard!", "success");
        }
      }

      // Function to show retry confirmation dialog
      function showRetryConfirmation(domainName) {
        return new Promise((resolve) => {
          const modal = document.createElement("div");
          modal.className =
            "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50";

          modal.innerHTML = `
            <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
              <div class="p-6">
                <div class="flex items-center mb-4">
                  <div class="p-2 bg-blue-100 rounded-lg mr-3">
                    <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                    </svg>
                  </div>
                  <div>
                    <h3 class="text-lg font-semibold text-gray-900">Retry Setup</h3>
                    <p class="text-sm text-gray-600">Domain: <strong>${domainName}</strong></p>
                  </div>
                </div>
                
                <div class="mb-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                  <div class="flex items-start">
                    <svg class="w-5 h-5 text-yellow-600 mt-0.5 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                    </svg>
                    <div class="text-sm">
                      <p class="font-medium text-yellow-800">Update Existing Setup</p>
                      <p class="text-yellow-700 mt-1">This will update the existing setup record and retry the failed setup process. The same setup ID will be preserved.</p>
                    </div>
                  </div>
                </div>
                
                <p class="text-gray-600 mb-6">Are you sure you want to retry the setup for <strong>"${domainName}"</strong>?</p>
                
                <div class="flex justify-end space-x-3">
                  <button type="button" class="cancel-retry-btn px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    Cancel
                  </button>
                  <button type="button" class="confirm-retry-btn px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    Retry Setup
                  </button>
                </div>
              </div>
            </div>
          `;

          document.body.appendChild(modal);

          // Handle cancel
          modal
            .querySelector(".cancel-retry-btn")
            .addEventListener("click", () => {
              document.body.removeChild(modal);
              resolve(false);
            });

          // Handle confirm
          modal
            .querySelector(".confirm-retry-btn")
            .addEventListener("click", () => {
              document.body.removeChild(modal);
              resolve(true);
            });

          // Handle click outside modal
          modal.addEventListener("click", (e) => {
            if (e.target === modal) {
              document.body.removeChild(modal);
              resolve(false);
            }
          });
        });
      }

      // Function to retry setup by updating existing record
      async function retrySetup(setupId, domainName) {
        try {
          showLoadingWithProgress(
            `Retrying setup for ${domainName}...`,
            "Updating existing setup record and retrying process..."
          );

          setProgress(10);

          // Call the retry endpoint with the specific setup ID to update existing record
          const response = await fetch(`/api/setup/retry/${setupId}`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
          });

          setProgress(30);

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const result = await response.json();
          setProgress(70);

          if (result.success) {
            setProgress(100);
            hideLoading();

            showNotification(
              `Setup retry initiated for ${domainName}. The page will refresh to show updated status.`,
              "success"
            );

            // Refresh the page after a short delay to show updated setup status
            setTimeout(() => {
              window.location.reload();
            }, 2000);
          } else {
            hideLoading();
            showNotification(
              `Failed to retry setup: ${result.message || "Unknown error"}`,
              "error"
            );
          }
        } catch (error) {
          console.error("Error retrying setup:", error);
          hideLoading();
          showNotification(`Failed to retry setup: ${error.message}`, "error");
        }
      }

      // Function to retry a specific setup step
      async function retryStep(setupId, step, domainName) {
        try {
          // Show confirmation dialog first
          const confirmed = await showStepRetryConfirmation(step, domainName);
          if (!confirmed) {
            return;
          }

          showLoadingWithProgress(
            `Retrying step '${getStepDisplayName(step)}' for ${domainName}...`,
            `Executing only the ${getStepDisplayName(step)} step...`
          );

          setProgress(10);

          // Call the step retry endpoint
          const response = await fetch(`/api/setup/retry-step/${setupId}`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              step: step,
            }),
          });

          setProgress(30);

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const result = await response.json();
          setProgress(70);

          if (result.success) {
            setProgress(100);
            hideLoading();

            showNotification(
              `Step '${getStepDisplayName(
                step
              )}' retry initiated for ${domainName}. The page will refresh to show updated status.`,
              "success"
            );

            // Refresh the page after a short delay to show updated setup status
            setTimeout(() => {
              window.location.reload();
            }, 2000);
          } else {
            hideLoading();
            showNotification(
              `Failed to retry step: ${result.message || "Unknown error"}`,
              "error"
            );
          }
        } catch (error) {
          console.error(`Error retrying step '${step}':`, error);
          hideLoading();
          showNotification(`Failed to retry step: ${error.message}`, "error");
        }
      }

      // Function to get user-friendly step display name
      function getStepDisplayName(step) {
        const stepNames = {
          site_created: "Site Creation",
          database_created: "Database Creation",
          ssh_keys_copied: "SSH Keys Copy",
          repository_cloned: "Repository Clone",
          env_configured: "Environment Configuration",
          laravel_setup_completed: "Laravel Setup Commands",
        };
        return stepNames[step] || step;
      }

      // Function to show step retry confirmation dialog
      function showStepRetryConfirmation(step, domainName) {
        return new Promise((resolve) => {
          const modal = document.createElement("div");
          modal.className =
            "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50";

          const stepDisplayName = getStepDisplayName(step);

          modal.innerHTML = `
            <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
              <div class="p-6">
                <div class="flex items-center mb-4">
                  <div class="p-2 bg-blue-100 rounded-lg mr-3">
                    <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                    </svg>
                  </div>
                  <div>
                    <h3 class="text-lg font-semibold text-gray-900">Retry Setup Step</h3>
                    <p class="text-sm text-gray-600">Step: <strong>${stepDisplayName}</strong></p>
                    <p class="text-sm text-gray-600">Domain: <strong>${domainName}</strong></p>
                  </div>
                </div>
                
                <div class="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                  <div class="flex items-start">
                    <svg class="w-5 h-5 text-blue-600 mt-0.5 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <div class="text-sm">
                      <p class="font-medium text-blue-800">Individual Step Retry</p>
                      <p class="text-blue-700 mt-1">This will execute only the <strong>${stepDisplayName}</strong> step. Other completed steps will remain unchanged. Only failed/incomplete steps can be retried.</p>
                    </div>
                  </div>
                </div>
                
                <p class="text-gray-600 mb-6">Are you sure you want to retry the <strong>"${stepDisplayName}"</strong> step for <strong>"${domainName}"</strong>?</p>
                
                <div class="flex justify-end space-x-3">
                  <button type="button" class="cancel-step-retry-btn px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    Cancel
                  </button>
                  <button type="button" class="confirm-step-retry-btn px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    Retry Step
                  </button>
                </div>
              </div>
            </div>
          `;

          document.body.appendChild(modal);

          // Handle cancel
          modal
            .querySelector(".cancel-step-retry-btn")
            .addEventListener("click", () => {
              document.body.removeChild(modal);
              resolve(false);
            });

          // Handle confirm
          modal
            .querySelector(".confirm-step-retry-btn")
            .addEventListener("click", () => {
              document.body.removeChild(modal);
              resolve(true);
            });

          // Handle click outside modal
          modal.addEventListener("click", (e) => {
            if (e.target === modal) {
              document.body.removeChild(modal);
              resolve(false);
            }
          });
        });
      }

      // Function to delete all failed setups
      async function deleteAllErrors() {
        // Get all failed setup rows - specifically target status column with bg-red-100 (failed status)
        const failedStatusElements = document.querySelectorAll(
          "tr[data-setup-id] .bg-red-100"
        );

        // Filter to only get status elements (not button hover states or other red elements)
        const failedRows = Array.from(failedStatusElements).filter(
          (element) => {
            // Check if this is actually a status span (contains "Failed" text or error-status class)
            return (
              element.textContent.includes("Failed") ||
              element.classList.contains("error-status")
            );
          }
        );

        if (failedRows.length === 0) {
          showNotification("No failed setups found to delete.", "info");
          return;
        }

        // Check total setups to show safety info
        const totalSetups =
          document.querySelectorAll("tr[data-setup-id]").length;
        const completedSetups = document.querySelectorAll(
          "tr[data-setup-id] .bg-green-100"
        ).length;

        // Show confirmation dialog with safety information
        const confirmed = await showDeleteAllErrorsConfirmation(
          failedRows.length,
          totalSetups,
          completedSetups
        );
        if (!confirmed) {
          return;
        }

        try {
          showLoadingWithProgress(
            `Deleting ${failedRows.length} failed setups...`,
            "Processing bulk deletion..."
          );

          let deletedCount = 0;
          let errorCount = 0;
          const total = failedRows.length;

          // Get setup IDs and domain names from failed rows
          const failedSetups = failedRows
            .map((statusElement) => {
              const row = statusElement.closest("tr[data-setup-id]");
              const setupId = row.getAttribute("data-setup-id");
              const domainCell = row.querySelector(
                "td:first-child .text-sm.font-medium"
              );
              const domainName = domainCell
                ? domainCell.textContent.trim()
                : `Setup-${setupId}`;

              // Double check this is actually a failed setup by checking the status element
              const actualStatus = statusElement.textContent.includes("Failed")
                ? "failed"
                : "unknown";

              return {
                setupId: setupId,
                domainName: domainName,
                setupStatus: actualStatus,
              };
            })
            .filter((setup) => setup.setupStatus === "failed"); // Only keep confirmed failed setups

          // Log what we found for debugging
          console.log(
            `Found ${failedSetups.length} failed setups to delete:`,
            failedSetups.map((s) => s.domainName)
          );

          // Delete each failed setup
          for (let i = 0; i < failedSetups.length; i++) {
            const setup = failedSetups[i];
            const progress = ((i + 1) / total) * 90; // Reserve 10% for final steps
            setProgress(progress);

            try {
              const response = await fetch(
                `/sites/api/setup-history/${setup.setupId}`,
                {
                  method: "DELETE",
                  headers: {
                    "Content-Type": "application/json",
                  },
                  body: JSON.stringify({
                    deleteFromCloudPanel: false, // Don't delete from CloudPanel for failed setups
                  }),
                }
              );

              const responseData = await response.json();

              if (responseData.success) {
                deletedCount++;
                // Remove the row from the table
                const row = document.querySelector(
                  `tr[data-setup-id="${setup.setupId}"]`
                );
                if (row) {
                  row.remove();
                }
              } else {
                errorCount++;
                console.error(
                  `Failed to delete setup ${setup.setupId}:`,
                  responseData.message
                );
              }
            } catch (error) {
              errorCount++;
              console.error(`Error deleting setup ${setup.setupId}:`, error);
            }
          }

          setProgress(100);
          hideLoading();

          // Show summary notification
          if (deletedCount > 0) {
            showNotification(
              `Successfully deleted ${deletedCount} failed setup${
                deletedCount !== 1 ? "s" : ""
              }` +
                (errorCount > 0
                  ? `. ${errorCount} deletion${
                      errorCount !== 1 ? "s" : ""
                    } failed.`
                  : "."),
              errorCount > 0 ? "warning" : "success"
            );
          } else {
            showNotification(
              `Failed to delete any setups. Please try again.`,
              "error"
            );
          }

          // Update stats
          updateStats();
        } catch (error) {
          console.error("Error in bulk delete:", error);
          hideLoading();
          showNotification(
            `Failed to delete failed setups: ${error.message}`,
            "error"
          );
        }
      }

      // Function to perform git pull using fetch
      async function performGitPull(siteUser, domainName) {
        const gitPullBtn = document.querySelector(`[data-site-user="${siteUser}"][data-domain-name="${domainName}"]`);
        const gitPullText = gitPullBtn.querySelector('.git-pull-text');
        const gitPullIcon = gitPullBtn.querySelector('svg');
        
        // Disable button and show loading state
        gitPullBtn.disabled = true;
        gitPullBtn.classList.add('opacity-50', 'cursor-not-allowed');
        gitPullIcon.classList.add('animate-spin');
        gitPullText.textContent = 'Pulling...';
        
        try {
          // Show immediate feedback
          showNotification(`Initiating git pull for ${domainName}...`, 'info');
          
          // Make the API call
          const response = await fetch(`/sites/${siteUser}/${domainName}/git-pull`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
          });
          
          const result = await response.json();
          
          if (result.success) {
            showNotification(
              `Git pull initiated for ${domainName}. ${result.message}`,
              'success'
            );
            
            // If job was created, show job tracking information
            if (result.jobId) {
              showNotification(
                `Job ID: ${result.jobId}. You can track progress in the background.`,
                'info'
              );
            }
          } else {
            showNotification(
              `Git pull failed: ${result.message}`,
              'error'
            );
          }
        } catch (error) {
          console.error('Error performing git pull:', error);
          showNotification(
            `Failed to initiate git pull: ${error.message}`,
            'error'
          );
        } finally {
          // Reset button state
          gitPullBtn.disabled = false;
          gitPullBtn.classList.remove('opacity-50', 'cursor-not-allowed');
          gitPullIcon.classList.remove('animate-spin');
          gitPullText.textContent = 'Force git pull';
        }
      }

      // Function to show confirmation dialog for delete all errors
      function showDeleteAllErrorsConfirmation(
        failedCount,
        totalCount,
        completedCount
      ) {
        return new Promise((resolve) => {
          const modal = document.createElement("div");
          modal.className =
            "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50";

          modal.innerHTML = `
            <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
              <div class="p-6">
                <div class="flex items-center mb-4">
                  <div class="p-2 bg-red-100 rounded-lg mr-3">
                    <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                    </svg>
                  </div>
                  <div>
                    <h3 class="text-lg font-semibold text-gray-900">Delete Failed Setups Only</h3>
                    <p class="text-sm text-gray-600">
                      <span class="text-red-600 font-semibold">${failedCount} failed</span> of ${totalCount} total setups
                      <br><span class="text-green-600 font-semibold">${completedCount} completed setups will be preserved</span>
                    </p>
                  </div>
                </div>
                
                <div class="mb-4 p-3 bg-orange-50 border border-orange-200 rounded-lg">
                  <div class="flex items-start">
                    <svg class="w-5 h-5 text-orange-600 mt-0.5 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                    </svg>
                    <div class="text-sm">
                      <p class="font-medium text-orange-800">Bulk Deletion Warning</p>
                      <p class="text-orange-700 mt-1">This action will permanently delete <strong>ONLY FAILED</strong> setup records from the database. <strong>Completed setups will be preserved.</strong> CloudPanel sites will NOT be affected since these setups failed.</p>
                    </div>
                  </div>
                </div>
                
                <p class="text-gray-600 mb-6">Are you sure you want to delete <strong>${failedCount} failed setup record${
            failedCount !== 1 ? "s" : ""
          }</strong>? <strong class="text-green-600">${completedCount} completed setup${
            completedCount !== 1 ? "s" : ""
          } will remain untouched.</strong> This action cannot be undone.</p>
                
                <div class="flex justify-end space-x-3">
                  <button type="button" class="cancel-bulk-delete-btn px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    Cancel
                  </button>
                  <button type="button" class="confirm-bulk-delete-btn px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500">
                    Delete All Failed Setups
                  </button>
                </div>
              </div>
            </div>
          `;

          document.body.appendChild(modal);

          // Handle cancel
          modal
            .querySelector(".cancel-bulk-delete-btn")
            .addEventListener("click", () => {
              document.body.removeChild(modal);
              resolve(false);
            });

          // Handle confirm
          modal
            .querySelector(".confirm-bulk-delete-btn")
            .addEventListener("click", () => {
              document.body.removeChild(modal);
              resolve(true);
            });

          // Handle click outside modal
          modal.addEventListener("click", (e) => {
            if (e.target === modal) {
              document.body.removeChild(modal);
              resolve(false);
            }
          });
        });
      }

      async function forceGitPullAllCompleted() {
        const button = document.getElementById('Force Git Pull All Completed');
        const buttonText = document.getElementById('forceGitPullAllCompletedText');
        const originalText = buttonText.textContent;

        try {
          // Disable button and show loading state
          button.disabled = true;
          buttonText.textContent = 'Processing...';

          // Get all setup rows regardless of status
          const allRows = Array.from(document.querySelectorAll('tr[data-setup-id]'))
            .map(row => {
              const setupId = row.dataset.setupId;
              const domain = row.querySelector('td:first-child .text-sm.font-medium.text-gray-900').textContent.trim();
              const siteUser = row.querySelector('td:nth-child(6) .text-sm.font-medium.text-gray-900').textContent.trim();
              return { setupId, domain, siteUser };
            })
            .filter(Boolean);

          if (allRows.length === 0) {
            showNotification('No sites found for git pull', 'warning');
            return;
          }

          // Send request to batch git pull endpoint
          const response = await fetch('/sites/batch-git-pull', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ sites: allRows })
          });

          if (!response.ok) {
            throw new Error('Failed to initiate batch git pull');
          }

          const result = await response.json();
          
          // Show success message
          showNotification('Batch git pull initiated successfully. Check logs for progress.', 'success');
        } catch (error) {
          console.error('Error in batch git pull:', error);
          showNotification('Failed to initiate batch git pull: ' + error.message, 'error');
        } finally {
          // Reset button state
          button.disabled = false;
          buttonText.textContent = originalText;
        }
      }

      // Function to handle git pull for a single site
      async function gitPull(siteUser, domainName) {
        try {
          const button = event.target.closest('button');
          const originalContent = button.innerHTML;
          
          // Update button to show loading state
          button.innerHTML = `
            <svg class="w-3 h-3 mr-1 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
            Pulling...
          `;
          button.disabled = true;

          const response = await fetch(`/sites/${siteUser}/${domainName}/git-pull`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          });

          const data = await response.json();

          if (data.success) {
            // Show success state temporarily
            button.innerHTML = `
              <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
              Success
            `;
            button.classList.remove('bg-yellow-100', 'text-yellow-800', 'hover:bg-yellow-200');
            button.classList.add('bg-green-100', 'text-green-800');

            // Refresh the page after a short delay
            setTimeout(() => {
              window.location.reload();
            }, 1500);
          } else {
            throw new Error(data.message || 'Failed to pull repository');
          }
        } catch (error) {
          console.error('Git pull error:', error);
          
          // Show error state
          button.innerHTML = `
            <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
            </svg>
            Error
          `;
          button.classList.remove('bg-yellow-100', 'text-yellow-800', 'hover:bg-yellow-200');
          button.classList.add('bg-red-100', 'text-red-800');

          // Show error toast
          showToast('Error pulling repository: ' + error.message, 'error');

          // Reset button after delay
          setTimeout(() => {
            button.innerHTML = originalContent;
            button.disabled = false;
            button.classList.remove('bg-red-100', 'text-red-800');
            button.classList.add('bg-yellow-100', 'text-yellow-800', 'hover:bg-yellow-200');
          }, 3000);
        }
      }

      // Function to check cronjob permissions for a user
      async function checkCronjobPermissions(siteUser) {
        const button = event.target.closest('button');
        const buttonText = button.querySelector('.cronjob-check-text');
        const buttonIcon = button.querySelector('svg');
        const originalContent = button.innerHTML;
        
        try {
          // Update button to show loading state
          button.disabled = true;
          button.classList.add('opacity-50', 'cursor-not-allowed');
          buttonIcon.classList.add('animate-spin');
          buttonText.textContent = 'Checking...';
          
          // Show notification
          showNotification(`Checking cronjob permissions for user: ${siteUser}...`, 'info');
          
          // Make API call to check permissions
          const response = await fetch('/sites/check-cronjob-permissions', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ userName: siteUser })
          });
          
          const result = await response.json();
          
          if (result.success) {
            if (result.hasPermission) {
              // User has permissions
              button.classList.remove('text-blue-600', 'bg-blue-50', 'hover:bg-blue-100');
              button.classList.add('text-green-600', 'bg-green-50', 'hover:bg-green-100');
              buttonIcon.classList.remove('animate-spin');
              buttonIcon.innerHTML = `
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              `;
              buttonText.textContent = 'Has Permissions';
              
              showNotification(`User ${siteUser} has cronjob permissions`, 'success');
                         } else {
               // User doesn't have permissions - show grant permissions option
               button.classList.remove('text-blue-600', 'bg-blue-50', 'hover:bg-blue-100');
               button.classList.add('text-red-600', 'bg-red-50', 'hover:bg-red-100');
               buttonIcon.classList.remove('animate-spin');
               buttonIcon.innerHTML = `
                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
               `;
               buttonText.textContent = 'No Permissions';
               
               showNotification(`User ${siteUser} does not have cronjob permissions (Operation not permitted)`, 'warning');
               
               // Show the grant permissions button
               const grantButton = document.querySelector(`[data-site-user="${siteUser}"].grant-cronjob-btn`);
               if (grantButton) {
                 grantButton.classList.remove('hidden');
                 grantButton.style.display = 'block';
               }
               
               // Show confirmation dialog to grant permissions
               const grantConfirmed = await showGrantPermissionsConfirmation(siteUser);
               if (grantConfirmed) {
                 await grantCronjobPermissions(siteUser);
               }
             }
          } else {
            throw new Error(result.message || 'Failed to check permissions');
          }
        } catch (error) {
          console.error('Cronjob permission check error:', error);
          
          // Show error state
          button.classList.remove('text-blue-600', 'bg-blue-50', 'hover:bg-blue-100');
          button.classList.add('text-red-600', 'bg-red-50', 'hover:bg-red-100');
          buttonIcon.classList.remove('animate-spin');
          buttonIcon.innerHTML = `
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
          `;
          buttonText.textContent = 'Error';
          
          showNotification(`Failed to check cronjob permissions: ${error.message}`, 'error');
        } finally {
          // Reset button state after delay
          setTimeout(() => {
            button.disabled = false;
            button.classList.remove('opacity-50', 'cursor-not-allowed');
            button.classList.remove('text-green-600', 'bg-green-50', 'hover:bg-green-100');
            button.classList.remove('text-red-600', 'bg-red-50', 'hover:bg-red-100');
            button.classList.add('text-blue-600', 'bg-blue-50', 'hover:bg-blue-100');
            buttonIcon.classList.remove('animate-spin');
            buttonIcon.innerHTML = `
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            `;
            buttonText.textContent = 'Check Cron Permissions';
          }, 5000); // Reset after 5 seconds
        }
      }

      // Function to show grant permissions confirmation dialog
      function showGrantPermissionsConfirmation(siteUser) {
        return new Promise((resolve) => {
          const modal = document.createElement("div");
          modal.className =
            "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50";

          modal.innerHTML = `
            <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
              <div class="p-6">
                <div class="flex items-center mb-4">
                  <div class="p-2 bg-orange-100 rounded-lg mr-3">
                    <svg class="w-6 h-6 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                    </svg>
                  </div>
                  <div>
                    <h3 class="text-lg font-semibold text-gray-900">Grant Cronjob Permissions</h3>
                    <p class="text-sm text-gray-600">User: <strong>${siteUser}</strong></p>
                  </div>
                </div>
                
                <div class="mb-4 p-3 bg-orange-50 border border-orange-200 rounded-lg">
                  <div class="flex items-start">
                    <svg class="w-5 h-5 text-orange-600 mt-0.5 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                    </svg>
                    <div class="text-sm">
                      <p class="font-medium text-orange-800">System Commands</p>
                      <p class="text-orange-700 mt-1">This will execute the following commands to grant cronjob permissions:</p>
                      <div class="mt-2 font-mono text-xs bg-orange-100 p-2 rounded">
                        touch /var/spool/cron/crontabs/${siteUser}<br>
                        chown ${siteUser} /var/spool/cron/crontabs/${siteUser}<br>
                        chmod 600 /var/spool/cron/crontabs/${siteUser}<br>
                        usermod -a -G crontab ${siteUser} (optional)
                      </div>
                    </div>
                  </div>
                </div>
                
                <p class="text-gray-600 mb-6">Do you want to grant cronjob permissions for user <strong>"${siteUser}"</strong>?</p>
                
                <div class="flex justify-end space-x-3">
                  <button type="button" class="cancel-grant-btn px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    Cancel
                  </button>
                  <button type="button" class="confirm-grant-btn px-4 py-2 bg-orange-600 text-white rounded-md hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-orange-500">
                    Grant Permissions
                  </button>
                </div>
              </div>
            </div>
          `;

          document.body.appendChild(modal);

          // Handle cancel
          modal
            .querySelector(".cancel-grant-btn")
            .addEventListener("click", () => {
              document.body.removeChild(modal);
              resolve(false);
            });

          // Handle confirm
          modal
            .querySelector(".confirm-grant-btn")
            .addEventListener("click", () => {
              document.body.removeChild(modal);
              resolve(true);
            });

          // Handle click outside modal
          modal.addEventListener("click", (e) => {
            if (e.target === modal) {
              document.body.removeChild(modal);
              resolve(false);
            }
          });
        });
      }

      // Function to grant cronjob permissions for a user
      async function grantCronjobPermissions(siteUser) {
        const grantButton = document.querySelector(`[data-site-user="${siteUser}"].grant-cronjob-btn`);
        const checkButton = document.querySelector(`[data-site-user="${siteUser}"].cronjob-check-btn`);
        const buttonText = grantButton.querySelector('.grant-cronjob-text');
        const buttonIcon = grantButton.querySelector('svg');
        
        try {
          // Update button to show loading state
          grantButton.disabled = true;
          grantButton.classList.add('opacity-50', 'cursor-not-allowed');
          buttonIcon.classList.add('animate-spin');
          buttonText.textContent = 'Granting...';
          
          // Show notification
          showNotification(`Granting cronjob permissions for user: ${siteUser}...`, 'info');
          
          // Make API call to grant permissions
          const response = await fetch('/sites/grant-cronjob-permissions', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ userName: siteUser })
          });
          
          const result = await response.json();
          
                    if (result.success) {
            // Permissions granted successfully
            grantButton.classList.remove('text-orange-600', 'bg-orange-50', 'hover:bg-orange-100');
            grantButton.classList.add('text-green-600', 'bg-green-50', 'hover:bg-green-100');
            buttonIcon.classList.remove('animate-spin');
            buttonIcon.innerHTML = `
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            `;
            buttonText.textContent = 'Permissions Granted';
            
            // Hide the grant permissions button
            grantButton.style.display = 'none';
            
            // Update check button to show success
            if (checkButton) {
              checkButton.classList.remove('text-red-600', 'bg-red-50', 'hover:bg-red-100');
              checkButton.classList.add('text-green-600', 'bg-green-50', 'hover:bg-green-100');
              const checkButtonText = checkButton.querySelector('.cronjob-check-text');
              const checkButtonIcon = checkButton.querySelector('svg');
              checkButtonIcon.innerHTML = `
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              `;
              checkButtonText.textContent = 'Has Permissions';
            }
            
            showNotification(`Cronjob permissions granted successfully for user ${siteUser}`, 'success');
          } else {
            throw new Error(result.message || 'Failed to grant permissions');
          }
        } catch (error) {
          console.error('Grant cronjob permissions error:', error);
          
          // Show error state
          grantButton.classList.remove('text-orange-600', 'bg-orange-50', 'hover:bg-orange-100');
          grantButton.classList.add('text-red-600', 'bg-red-50', 'hover:bg-red-100');
          buttonIcon.classList.remove('animate-spin');
          buttonIcon.innerHTML = `
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
          `;
          buttonText.textContent = 'Grant Failed';
          
          showNotification(`Failed to grant cronjob permissions: ${error.message}`, 'error');
        } finally {
          // Reset button state after delay
          setTimeout(() => {
            grantButton.disabled = false;
            grantButton.classList.remove('opacity-50', 'cursor-not-allowed');
            grantButton.classList.remove('text-green-600', 'bg-green-50', 'hover:bg-green-100');
            grantButton.classList.remove('text-red-600', 'bg-red-50', 'hover:bg-red-100');
            grantButton.classList.add('text-orange-600', 'bg-orange-50', 'hover:bg-orange-100');
            buttonIcon.classList.remove('animate-spin');
            buttonIcon.innerHTML = `
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
            `;
            buttonText.textContent = 'Grant Permissions';
          }, 5000); // Reset after 5 seconds
        }
      }
    </script>
  </body>
</html>
