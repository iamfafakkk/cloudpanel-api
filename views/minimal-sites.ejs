<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Minimal Sites - CloudPanel API</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            primary: {
              50: "#f0f9ff",
              500: "#3b82f6",
              600: "#2563eb",
              700: "#1d4ed8",
            },
          },
          animation: {
            "fade-in": "fadeIn 0.3s ease-out",
            "fade-out": "fadeOut 0.3s ease-in",
            "scale-in": "scaleIn 0.3s ease-out",
            "scale-out": "scaleOut 0.3s ease-in",
          },
          keyframes: {
            fadeIn: {
              "0%": { opacity: "0" },
              "100%": { opacity: "1" },
            },
            fadeOut: {
              "0%": { opacity: "1" },
              "100%": { opacity: "0" },
            },
            scaleIn: {
              "0%": { opacity: "0", transform: "scale(0.95)" },
              "100%": { opacity: "1", transform: "scale(1)" },
            },
            scaleOut: {
              "0%": { opacity: "1", transform: "scale(1)" },
              "100%": { opacity: "0", transform: "scale(0.95)" },
            },
          },
        },
      },
    };
  </script>
</head>

<body class="bg-gray-50 font-sans">
  <div class="max-w-7xl mx-auto p-6">
    <!-- Loading Overlay -->
    <div id="loadingOverlay" class="fixed inset-0 bg-gray-900 bg-opacity-50 z-50 hidden items-center justify-center">
      <div class="bg-white rounded-lg p-8 flex flex-col items-center max-w-sm mx-4">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mb-4"></div>
        <div class="text-lg font-medium text-gray-900 text-center" id="loadingText">
          Loading sites data...
        </div>
        <div class="text-sm text-gray-500 mt-2 text-center" id="loadingSubtext">
          Please wait while we fetch the data
        </div>
      </div>
    </div>

    <!-- Refresh Loading Indicator -->
    <div id="refreshLoading" class="hidden">
      <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
        <div class="flex items-center">
          <div class="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600 mr-3"></div>
          <div class="text-blue-800">
            <div class="font-medium">Refreshing data...</div>
            <div class="text-sm">Fetching latest sites information</div>
          </div>
        </div>
      </div>
    </div>

    <div class="bg-white rounded-lg shadow-lg overflow-hidden">
      <!-- Navigation Header -->
      <nav class="bg-white border-b border-gray-200 shadow-sm">
        <div class="px-4 lg:px-8 py-4">
          <div class="flex justify-between items-center">
            <!-- Logo/Brand -->
            <div class="flex items-center space-x-2 lg:space-x-4">
              <div class="text-xl lg:text-2xl font-bold text-blue-600">
                CloudPanel
              </div>
              <span class="text-gray-400 hidden sm:inline">|</span>
              <span class="text-gray-600 font-medium hidden sm:inline">API Management</span>
            </div>

            <!-- Navigation Menu -->
            <div class="flex items-center space-x-2 lg:space-x-6">
              <a href="/docs"
                class="flex items-center px-2 lg:px-4 py-2 text-gray-600 hover:text-blue-600 hover:bg-gray-50 rounded-lg font-medium transition-all duration-200 text-sm lg:text-base">
                <svg class="w-4 h-4 lg:w-5 lg:h-5 mr-1 lg:mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253">
                  </path>
                </svg>
                <span class="hidden sm:inline">Docs</span>
              </a>
              <!-- <a
                  href="/sites"
                  class="flex items-center px-2 lg:px-4 py-2 text-gray-600 hover:text-blue-600 hover:bg-gray-50 rounded-lg font-medium transition-all duration-200 text-sm lg:text-base"
                >
                  <svg
                    class="w-4 h-4 lg:w-5 lg:h-5 mr-1 lg:mr-2"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9m0 9c-5 0-9-4-9-9s4-9 9-9"
                    ></path>
                  </svg>
                  <span class="hidden sm:inline">Site Lists</span>
                </a> -->
              <a href="/lists/minimal"
                class="flex items-center px-2 lg:px-4 py-2 text-blue-600 bg-blue-50 rounded-lg font-medium transition-all duration-200 hover:bg-blue-100 text-sm lg:text-base">
                <svg class="w-4 h-4 lg:w-5 lg:h-5 mr-1 lg:mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10">
                  </path>
                </svg>
                <span class="hidden sm:inline">Sites</span>
              </a>
              <!-- <a
                  href="/sites/setup-history"
                  class="flex items-center px-2 lg:px-4 py-2 text-gray-600 hover:text-blue-600 hover:bg-gray-50 rounded-lg font-medium transition-all duration-200 text-sm lg:text-base"
                >
                  <svg
                    class="w-4 h-4 lg:w-5 lg:h-5 mr-1 lg:mr-2"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                    ></path>
                  </svg>
                  <span class="hidden sm:inline">Setup History</span>
                </a> -->

              <a href="/jobs/monitor"
                class="flex items-center px-2 lg:px-4 py-2 text-gray-600 hover:bg-blue-100 text-sm lg:text-base">
                <svg class="w-4 h-4 lg:w-5 lg:h-5 mr-1 lg:mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M9 5H7a2 2 0 00-2 2v6a2 2 0 002 2h2m0 0h2m-2 0v4a2 2 0 002 2h2a2 2 0 002-2v-4m0 0V9a2 2 0 00-2-2H9a2 2 0 00-2 2v6z">
                  </path>
                </svg>
                <span class="hidden sm:inline">Jobs Monitor</span>
              </a>
              <a href="/logs"
                class="flex items-center px-2 lg:px-4 py-2 text-gray-600 hover:text-blue-600 hover:bg-gray-50 rounded-lg font-medium transition-all duration-200 text-sm lg:text-base">
                <svg class="w-4 h-4 lg:w-5 lg:h-5 mr-1 lg:mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z">
                  </path>
                </svg>
                <span class="hidden sm:inline">Logs</span>
              </a>

              <!-- User Menu -->
              <div class="relative group">
                <button
                  class="flex items-center px-2 lg:px-4 py-2 text-gray-600 hover:text-blue-600 hover:bg-gray-50 rounded-lg font-medium transition-all duration-200 text-sm lg:text-base">
                  <svg class="w-4 h-4 lg:w-5 lg:h-5 mr-1 lg:mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                      d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                  </svg>
                  <span class="hidden sm:inline">Account</span>
                  <svg class="w-3 h-3 lg:w-4 lg:h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                  </svg>
                </button>

                <!-- Dropdown Menu -->
                <div
                  class="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-10">
                  <div class="py-2">
                    <a href="/auth/logout"
                      class="block px-4 py-2 text-red-600 hover:bg-red-50 transition-colors duration-200 text-sm">
                      <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                          d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1">
                        </path>
                      </svg>
                      Logout
                    </a>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </nav>

      <!-- Header -->
      <div class="relative bg-gradient-to-r from-green-600 to-blue-600 text-white p-4 lg:p-8 text-center">
        <h1 class="text-2xl lg:text-3xl font-bold mb-2">Minimal Sites</h1>
        <p class="text-blue-100 text-sm lg:text-base">
          View all sites with their basic information and statistics
        </p>
      </div>

      <div class="p-4 lg:p-8">
        <!-- Stats Cards -->
        <div class="grid grid-cols-2 lg:grid-cols-4 gap-4 lg:gap-6 mb-8">
          <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 lg:p-6">
            <div class="flex items-center">
              <div class="p-2 lg:p-3 bg-blue-500 rounded-lg">
                <svg class="w-4 h-4 lg:w-6 lg:h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10">
                  </path>
                </svg>
              </div>
              <div class="ml-3 lg:ml-4">
                <p class="text-sm lg:text-base text-blue-600 font-medium">
                  Total Sites
                </p>
                <p class="text-lg lg:text-2xl font-bold text-blue-900" id="total-sites">
                  <%= sitesData.length %>
                </p>
              </div>
            </div>
          </div>

          <div class="bg-green-50 border border-green-200 rounded-lg p-4 lg:p-6">
            <div class="flex items-center">
              <div class="p-2 lg:p-3 bg-green-500 rounded-lg">
                <svg class="w-4 h-4 lg:w-6 lg:h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                </svg>
              </div>
              <div class="ml-3 lg:ml-4">
                <p class="text-sm lg:text-base text-green-600 font-medium">
                  Unique Users
                </p>
                <p class="text-lg lg:text-2xl font-bold text-green-900" id="unique-users">
                  <%= [...new Set(sitesData.map(site=> site.user))].length %>
                </p>
              </div>
            </div>
          </div>

          <div class="bg-purple-50 border border-purple-200 rounded-lg p-4 lg:p-6">
            <div class="flex items-center">
              <div class="p-2 lg:p-3 bg-purple-500 rounded-lg">
                <svg class="w-4 h-4 lg:w-6 lg:h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <div class="ml-3 lg:ml-4">
                <p class="text-sm lg:text-base text-purple-600 font-medium">
                  Recent Sites
                </p>
                <p class="text-lg lg:text-2xl font-bold text-purple-900" id="recent-sites">
                  <%= sitesData.filter(site=> {
                    const created = new Date(site.created);
                    const now = new Date();
                    const diffTime = Math.abs(now - created);
                    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                    return diffDays <= 7; }).length %>
                </p>
              </div>
            </div>
          </div>

          <div class="bg-orange-50 border border-orange-200 rounded-lg p-4 lg:p-6">
            <div class="flex items-center">
              <div class="p-2 lg:p-3 bg-orange-500 rounded-lg">
                <svg class="w-4 h-4 lg:w-6 lg:h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4">
                  </path>
                </svg>
              </div>
              <div class="ml-3 lg:ml-4">
                <p class="text-sm lg:text-base text-orange-600 font-medium">
                  Active Domains
                </p>
                <p class="text-lg lg:text-2xl font-bold text-orange-900" id="active-domains">
                  <%= sitesData.filter(site=> site.domain && site.domain.trim() !== '').length %>
                </p>
              </div>
            </div>
          </div>
        </div>

        <!-- Sites Table -->
        <div class="bg-white rounded-lg border border-gray-200 overflow-hidden">
          <div class="px-4 lg:px-6 py-4 border-b border-gray-200">
            <div class="flex flex-col lg:flex-row lg:justify-between lg:items-center space-y-4 lg:space-y-0">
              <h3 class="text-lg font-semibold text-gray-900">Sites List</h3>

              <!-- Search and Filter Section -->
              <div class="flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-3">
                <!-- Search Input -->
                <div class="relative">
                  <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <svg class="h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                    </svg>
                  </div>
                  <input type="text" id="searchInput" placeholder="Search by domain or user..."
                    class="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-blue-500 focus:border-blue-500 text-sm"
                    oninput="filterSites()" />
                </div>

                <!-- Clear Search Button -->
                <button id="clearSearchBtn" onclick="clearSearch()"
                  class="hidden inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200">
                  <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12">
                    </path>
                  </svg>
                  Clear
                </button>

                <!-- Refresh Button -->
                <button onclick="refreshData()"
                  class="inline-flex items-center px-3 py-2 border border-blue-300 shadow-sm text-sm leading-4 font-medium rounded-md text-blue-700 bg-blue-50 hover:bg-blue-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200">
                  <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                      d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15">
                    </path>
                  </svg>
                  Refresh
                </button>
              </div>
            </div>

            <!-- Batch Operations Section -->
            <div class="mt-4 flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-3">
              <!-- Batch Check Cronjob Permissions Button -->
              <button id="batchCheckCronjobPermissionsBtn" onclick="batchCheckCronjobPermissions()"
                class="inline-flex items-center px-4 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-orange-600 hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 transition-colors duration-200">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span id="batchCheckCronjobPermissionsText">Check All Crontab Permissions</span>
              </button>

              <!-- Force Git Pull All Completed Button -->
              <button id="forceGitPullAllCompletedBtn" onclick="forceGitPullAllCompleted()"
                class="inline-flex items-center px-4 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors duration-200">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15">
                  </path>
                </svg>
                <span id="forceGitPullAllCompletedText">Force Git Pull All Sites</span>
              </button>
              <!-- Search Results Info -->
              <div id="searchInfo" class="hidden mt-3 text-sm text-gray-600">
                <span id="searchResultsText"></span>
              </div>
            </div>

            <div class="overflow-x-auto">
              <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                  <tr>
                    <th scope="col"
                      class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Domain
                    </th>
                    <th scope="col"
                      class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      User
                    </th>
                    <th scope="col"
                      class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Path
                    </th>
                    <th scope="col"
                      class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Created
                    </th>
                    <th scope="col"
                      class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Modified
                    </th>
                    <th scope="col"
                      class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200" id="sitesTableBody">
                  <% sitesData.forEach((site, index)=> { %>
                    <tr
                      class="site-row <%= index % 2 === 0 ? 'bg-white' : 'bg-gray-50' %> hover:bg-blue-50 transition-colors duration-200"
                      data-domain="<%= site.domain.toLowerCase() %>" data-user="<%= site.user.toLowerCase() %>">
                      <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex items-center">
                          <div class="flex-shrink-0 h-8 w-8">
                            <div class="h-8 w-8 rounded-full bg-blue-100 flex items-center justify-center">
                              <svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                  d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9m0 9c-5 0-9-4-9-9s4-9 9-9">
                                </path>
                              </svg>
                            </div>
                          </div>
                          <div class="ml-4">
                            <div class="text-sm font-medium text-gray-900">
                              <a href="https://<%= site.domain %>" target="_blank" rel="noopener noreferrer">
                                <%= site.domain %>
                              </a>
                            </div>
                          </div>
                        </div>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap">
                        <div class="text-sm text-gray-900">
                          <%= site.user %>
                        </div>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap">
                        <div class="text-sm text-gray-900 font-mono bg-gray-100 px-2 py-1 rounded">
                          <%= site.path %>
                        </div>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap">
                        <div class="text-sm text-gray-900">
                          <%= new Date(site.created).toLocaleDateString('id-ID', { year: 'numeric' , month: 'short' ,
                            day: 'numeric' , hour: '2-digit' , minute: '2-digit' }) %>
                        </div>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap">
                        <div class="text-sm text-gray-900">
                          <%= new Date(site.modified).toLocaleDateString('id-ID', { year: 'numeric' , month: 'short' ,
                            day: 'numeric' , hour: '2-digit' , minute: '2-digit' }) %>
                        </div>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        <div class="flex flex-col space-y-2">
                          <!-- Git Pull Button -->
                          <button onclick="performGitPull('<%= site.user %>', '<%= site.domain %>')"
                            data-site-user="<%= site.user %>" data-domain-name="<%= site.domain %>"
                            class="inline-flex items-center px-3 py-1 border border-transparent text-xs leading-4 font-medium rounded-md text-blue-700 bg-blue-100 hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200">
                            <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15">
                              </path>
                            </svg>
                            <span class="git-pull-text">Git Pull</span>
                          </button>

                          <!-- Check Cronjob Permissions Button -->
                          <button onclick="checkCronjobPermissions('<%= site.user %>')"
                            data-site-user="<%= site.user %>"
                            class="cronjob-check-btn inline-flex items-center px-3 py-1 border border-transparent text-xs leading-4 font-medium rounded-md text-blue-600 bg-blue-50 hover:bg-blue-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200">
                            <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            <span class="cronjob-check-text">Check Cron</span>
                          </button>

                          <!-- Grant Cronjob Permissions Button (initially hidden) -->
                          <button onclick="grantCronjobPermissions('<%= site.user %>')"
                            data-site-user="<%= site.user %>"
                            class="grant-cronjob-btn hidden inline-flex items-center px-3 py-1 border border-transparent text-xs leading-4 font-medium rounded-md text-orange-600 bg-orange-50 hover:bg-orange-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 transition-colors duration-200"
                            style="display: none;">
                            <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z">
                              </path>
                            </svg>
                            <span class="grant-cronjob-text">Grant Permissions</span>
                          </button>
                        </div>
                      </td>
                    </tr>
                    <% }); %>

                      <!-- No Results Row -->
                      <tr id="noResultsRow" class="hidden">
                        <td colspan="6" class="px-6 py-8 text-center">
                          <div class="flex flex-col items-center">
                            <svg class="w-12 h-12 text-gray-400 mb-4" fill="none" stroke="currentColor"
                              viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                            </svg>
                            <h3 class="text-lg font-medium text-gray-900 mb-2">No sites found</h3>
                            <p class="text-gray-500">Try adjusting your search criteria or clear the search to see all
                              sites.</p>
                          </div>
                        </td>
                      </tr>
                </tbody>
              </table>
            </div>

            <% if (sitesData.length===0) { %>
              <div class="text-center py-12">
                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10">
                  </path>
                </svg>
                <h3 class="mt-2 text-sm font-medium text-gray-900">No sites found</h3>
                <p class="mt-1 text-sm text-gray-500">No sites are currently available in the system.</p>
              </div>
              <% } %>
          </div>
        </div>
      </div>
    </div>

    <script>
      function refreshData() {
        document.getElementById('refreshLoading').classList.remove('hidden');

        // Simulate refresh - in real implementation, this would fetch new data
        setTimeout(() => {
          window.location.reload();
        }, 1000);
      }

      // Auto-refresh every 5 minutes
      setInterval(() => {
        refreshData();
      }, 300000);

      // Search and filter functionality
      function filterSites() {
        const searchInput = document.getElementById('searchInput');
        const searchTerm = searchInput.value.toLowerCase().trim();
        const siteRows = document.querySelectorAll('.site-row');
        const noResultsRow = document.getElementById('noResultsRow');
        const searchInfo = document.getElementById('searchInfo');
        const searchResultsText = document.getElementById('searchResultsText');
        const clearSearchBtn = document.getElementById('clearSearchBtn');

        let visibleCount = 0;

        siteRows.forEach(row => {
          const domain = row.getAttribute('data-domain');
          const user = row.getAttribute('data-user');

          const matchesDomain = domain.includes(searchTerm);
          const matchesUser = user.includes(searchTerm);

          if (searchTerm === '' || matchesDomain || matchesUser) {
            row.style.display = '';
            visibleCount++;
          } else {
            row.style.display = 'none';
          }
        });

        // Show/hide no results message
        if (visibleCount === 0 && searchTerm !== '') {
          noResultsRow.classList.remove('hidden');
        } else {
          noResultsRow.classList.add('hidden');
        }

        // Show/hide search info and clear button
        if (searchTerm !== '') {
          searchInfo.classList.remove('hidden');
          clearSearchBtn.classList.remove('hidden');

          if (visibleCount === 0) {
            searchResultsText.textContent = `No sites found for "${searchInput.value}"`;
          } else {
            searchResultsText.textContent = `Showing ${visibleCount} site${visibleCount !== 1 ? 's' : ''} matching "${searchInput.value}"`;
          }
        } else {
          searchInfo.classList.add('hidden');
          clearSearchBtn.classList.add('hidden');
        }
      }

      // Clear search function
      function clearSearch() {
        const searchInput = document.getElementById('searchInput');
        searchInput.value = '';
        filterSites();
        searchInput.focus();
      }

      // Add keyboard shortcut for search (Ctrl+F or Cmd+F)
      document.addEventListener('keydown', function (e) {
        if ((e.ctrlKey || e.metaKey) && e.key === 'f') {
          e.preventDefault();
          document.getElementById('searchInput').focus();
        }

        // ESC to clear search
        if (e.key === 'Escape') {
          const searchInput = document.getElementById('searchInput');
          if (searchInput.value !== '') {
            clearSearch();
          }
        }
      });

      // Function to show notification
      function showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg max-w-sm transition-all duration-300 transform translate-x-full`;

        const colors = {
          success: 'bg-green-100 border border-green-400 text-green-700',
          error: 'bg-red-100 border border-red-400 text-red-700',
          warning: 'bg-yellow-100 border border-yellow-400 text-yellow-700',
          info: 'bg-blue-100 border border-blue-400 text-blue-700'
        };

        notification.className += ` ${colors[type] || colors.info}`;
        notification.innerHTML = `
          <div class="flex items-center">
            <div class="flex-1">
              <p class="text-sm font-medium">${message}</p>
            </div>
            <button onclick="this.parentElement.parentElement.remove()" class="ml-2 text-gray-400 hover:text-gray-600">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
        `;

        document.body.appendChild(notification);

        // Animate in
        setTimeout(() => {
          notification.classList.remove('translate-x-full');
        }, 100);

        // Auto remove after 5 seconds
        setTimeout(() => {
          notification.classList.add('translate-x-full');
          setTimeout(() => {
            if (notification.parentElement) {
              notification.parentElement.removeChild(notification);
            }
          }, 300);
        }, 1500);
      }

      // Function to perform git pull for a site
      async function performGitPull(siteUser, domainName) {
        const gitPullBtn = document.querySelector(`[data-site-user="${siteUser}"][data-domain-name="${domainName}"]`);
        const gitPullText = gitPullBtn.querySelector('.git-pull-text');
        const gitPullIcon = gitPullBtn.querySelector('svg');

        // Disable button and show loading state
        gitPullBtn.disabled = true;
        gitPullBtn.classList.add('opacity-50', 'cursor-not-allowed');
        gitPullIcon.classList.add('animate-spin');
        gitPullText.textContent = 'Pulling...';

        try {
          // Show immediate feedback
          showNotification(`Initiating git pull for ${domainName}...`, 'info');

          // Make the API call
          const response = await fetch(`/sites/${siteUser}/${domainName}/git-pull`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
          });

          const result = await response.json();

          if (result.success) {
            showNotification(
              `Git pull initiated for ${domainName}. ${result.message}`,
              'success'
            );

            // If job was created, show job tracking information
            if (result.jobId) {
              showNotification(
                `Job ID: ${result.jobId}. You can track progress in the background.`,
                'info'
              );
            }
          } else {
            showNotification(
              `Git pull failed: ${result.message}`,
              'error'
            );
          }
        } catch (error) {
          console.error('Error performing git pull:', error);
          showNotification(
            `Failed to initiate git pull: ${error.message}`,
            'error'
          );
        } finally {
          // Reset button state
          gitPullBtn.disabled = false;
          gitPullBtn.classList.remove('opacity-50', 'cursor-not-allowed');
          gitPullIcon.classList.remove('animate-spin');
          gitPullText.textContent = 'Force git pull';
        }
      }

      // Function to check cronjob permissions for a user
      async function checkCronjobPermissions(siteUser) {
        const button = event.target.closest('button');
        const buttonText = button.querySelector('.cronjob-check-text');
        const buttonIcon = button.querySelector('svg');
        const originalContent = button.innerHTML;

        try {
          // Update button to show loading state
          button.disabled = true;
          button.classList.add('opacity-50', 'cursor-not-allowed');
          buttonIcon.classList.add('animate-spin');
          buttonText.textContent = 'Checking...';

          // Show notification
          showNotification(`Checking cronjob permissions for user: ${siteUser}...`, 'info');

          // Make API call to check permissions
          const response = await fetch('/sites/check-cronjob-permissions', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ userName: siteUser })
          });

          const result = await response.json();

          if (result.success) {
            if (result.hasPermission) {
              // User has permissions
              button.classList.remove('text-blue-600', 'bg-blue-50', 'hover:bg-blue-100');
              button.classList.add('text-green-600', 'bg-green-50', 'hover:bg-green-100');
              buttonIcon.classList.remove('animate-spin');
              buttonIcon.innerHTML = `
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              `;
              buttonText.textContent = 'Has Permissions';

              showNotification(`User ${siteUser} has cronjob permissions`, 'success');
            } else {
              // User doesn't have permissions - show grant permissions option
              button.classList.remove('text-blue-600', 'bg-blue-50', 'hover:bg-blue-100');
              button.classList.add('text-red-600', 'bg-red-50', 'hover:bg-red-100');
              buttonIcon.classList.remove('animate-spin');
              buttonIcon.innerHTML = `
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              `;
              buttonText.textContent = 'No Permissions';

              showNotification(`User ${siteUser} does not have cronjob permissions (Operation not permitted)`, 'warning');

              // Show the grant permissions button
              const grantButton = document.querySelector(`[data-site-user="${siteUser}"].grant-cronjob-btn`);
              if (grantButton) {
                grantButton.classList.remove('hidden');
                grantButton.style.display = 'block';
              }

              // Show confirmation dialog to grant permissions
              const grantConfirmed = await showGrantPermissionsConfirmation(siteUser);
              if (grantConfirmed) {
                await grantCronjobPermissions(siteUser);
              }
            }
          } else {
            throw new Error(result.message || 'Failed to check permissions');
          }
        } catch (error) {
          console.error('Cronjob permission check error:', error);

          // Show error state
          button.classList.remove('text-blue-600', 'bg-blue-50', 'hover:bg-blue-100');
          button.classList.add('text-red-600', 'bg-red-50', 'hover:bg-red-100');
          buttonIcon.classList.remove('animate-spin');
          buttonIcon.innerHTML = `
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
          `;
          buttonText.textContent = 'Error';

          showNotification(`Failed to check cronjob permissions: ${error.message}`, 'error');
        } finally {
          // Reset button state after delay
          setTimeout(() => {
            button.disabled = false;
            button.classList.remove('opacity-50', 'cursor-not-allowed');
            button.classList.remove('text-green-600', 'bg-green-50', 'hover:bg-green-100');
            button.classList.remove('text-red-600', 'bg-red-50', 'hover:bg-red-100');
            button.classList.add('text-blue-600', 'bg-blue-50', 'hover:bg-blue-100');
            buttonIcon.classList.remove('animate-spin');
            buttonIcon.innerHTML = `
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            `;
            buttonText.textContent = 'Check Cron Permissions';
          }, 5000); // Reset after 5 seconds
        }
      }

      // Function to show grant permissions confirmation dialog
      function showGrantPermissionsConfirmation(siteUser) {
        return new Promise((resolve) => {
          const modal = document.createElement("div");
          modal.className =
            "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50";

          modal.innerHTML = `
            <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
              <div class="p-6">
                <div class="flex items-center mb-4">
                  <div class="p-2 bg-orange-100 rounded-lg mr-3">
                    <svg class="w-6 h-6 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                    </svg>
                  </div>
                  <div>
                    <h3 class="text-lg font-semibold text-gray-900">Grant Cronjob Permissions</h3>
                    <p class="text-sm text-gray-600">User: <strong>${siteUser}</strong></p>
                  </div>
                </div>
                
                <div class="mb-4 p-3 bg-orange-50 border border-orange-200 rounded-lg">
                  <div class="flex items-start">
                    <svg class="w-5 h-5 text-orange-600 mt-0.5 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                    </svg>
                    <div class="text-sm">
                      <p class="font-medium text-orange-800">System Commands</p>
                      <p class="text-orange-700 mt-1">This will execute the following commands to grant cronjob permissions:</p>
                      <div class="mt-2 font-mono text-xs bg-orange-100 p-2 rounded">
                        touch /var/spool/cron/crontabs/${siteUser}<br>
                        chown ${siteUser} /var/spool/cron/crontabs/${siteUser}<br>
                        chmod 600 /var/spool/cron/crontabs/${siteUser}<br>
                        usermod -a -G crontab ${siteUser} (optional)
                      </div>
                    </div>
                  </div>
                </div>
                
                <p class="text-gray-600 mb-6">Do you want to grant cronjob permissions for user <strong>"${siteUser}"</strong>?</p>
                
                <div class="flex justify-end space-x-3">
                  <button type="button" class="cancel-grant-btn px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    Cancel
                  </button>
                  <button type="button" class="confirm-grant-btn px-4 py-2 bg-orange-600 text-white rounded-md hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-orange-500">
                    Grant Permissions
                  </button>
                </div>
              </div>
            </div>
          `;

          document.body.appendChild(modal);

          // Handle cancel
          modal
            .querySelector(".cancel-grant-btn")
            .addEventListener("click", () => {
              document.body.removeChild(modal);
              resolve(false);
            });

          // Handle confirm
          modal
            .querySelector(".confirm-grant-btn")
            .addEventListener("click", () => {
              document.body.removeChild(modal);
              resolve(true);
            });

          // Handle click outside modal
          modal.addEventListener("click", (e) => {
            if (e.target === modal) {
              document.body.removeChild(modal);
              resolve(false);
            }
          });
        });
      }

      // Function to grant cronjob permissions for a user
      async function grantCronjobPermissions(siteUser) {
        const grantButton = document.querySelector(`[data-site-user="${siteUser}"].grant-cronjob-btn`);
        const checkButton = document.querySelector(`[data-site-user="${siteUser}"].cronjob-check-btn`);
        const buttonText = grantButton.querySelector('.grant-cronjob-text');
        const buttonIcon = grantButton.querySelector('svg');

        try {
          // Update button to show loading state
          grantButton.disabled = true;
          grantButton.classList.add('opacity-50', 'cursor-not-allowed');
          buttonIcon.classList.add('animate-spin');
          buttonText.textContent = 'Granting...';

          // Show notification
          showNotification(`Granting cronjob permissions for user: ${siteUser}...`, 'info');

          // Make API call to grant permissions
          const response = await fetch('/sites/grant-cronjob-permissions', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ userName: siteUser })
          });

          const result = await response.json();

          if (result.success) {
            // Permissions granted successfully
            grantButton.classList.remove('text-orange-600', 'bg-orange-50', 'hover:bg-orange-100');
            grantButton.classList.add('text-green-600', 'bg-green-50', 'hover:bg-green-100');
            buttonIcon.classList.remove('animate-spin');
            buttonIcon.innerHTML = `
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            `;
            buttonText.textContent = 'Permissions Granted';

            // Hide the grant permissions button
            grantButton.style.display = 'none';

            // Update check button to show success
            if (checkButton) {
              checkButton.classList.remove('text-red-600', 'bg-red-50', 'hover:bg-red-100');
              checkButton.classList.add('text-green-600', 'bg-green-50', 'hover:bg-green-100');
              const checkButtonText = checkButton.querySelector('.cronjob-check-text');
              const checkButtonIcon = checkButton.querySelector('svg');
              checkButtonIcon.innerHTML = `
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              `;
              checkButtonText.textContent = 'Has Permissions';
            }

            showNotification(`Cronjob permissions granted successfully for user ${siteUser}`, 'success');
          } else {
            throw new Error(result.message || 'Failed to grant permissions');
          }
        } catch (error) {
          console.error('Grant cronjob permissions error:', error);

          // Show error state
          grantButton.classList.remove('text-orange-600', 'bg-orange-50', 'hover:bg-orange-100');
          grantButton.classList.add('text-red-600', 'bg-red-50', 'hover:bg-red-100');
          buttonIcon.classList.remove('animate-spin');
          buttonIcon.innerHTML = `
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
          `;
          buttonText.textContent = 'Grant Failed';

          showNotification(`Failed to grant cronjob permissions: ${error.message}`, 'error');
        } finally {
          // Reset button state after delay
          setTimeout(() => {
            grantButton.disabled = false;
            grantButton.classList.remove('opacity-50', 'cursor-not-allowed');
            grantButton.classList.remove('text-green-600', 'bg-green-50', 'hover:bg-green-100');
            grantButton.classList.remove('text-red-600', 'bg-red-50', 'hover:bg-red-100');
            grantButton.classList.add('text-orange-600', 'bg-orange-50', 'hover:bg-orange-100');
            buttonIcon.classList.remove('animate-spin');
            buttonIcon.innerHTML = `
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
            `;
            buttonText.textContent = 'Grant Permissions';
          }, 5000); // Reset after 5 seconds
        }
      }

      // Function to perform batch git pull for all sites
      async function forceGitPullAllCompleted() {
        const button = document.getElementById('forceGitPullAllCompletedBtn');
        const buttonText = document.getElementById('forceGitPullAllCompletedText');
        const originalText = buttonText.textContent;

        try {
          // Disable button and show loading state
          button.disabled = true;
          buttonText.textContent = 'Processing...';

          // Get all site rows
          const allRows = Array.from(document.querySelectorAll('.site-row'))
            .map(row => {
              const domain = row.dataset.domain;
              const user = row.dataset.user;
              if (domain && user) {
                return {
                  setupId: null, // Not available in minimal sites view
                  domain: domain,
                  siteUser: user
                };
              }
              return null;
            })
            .filter(Boolean);

          if (allRows.length === 0) {
            showNotification('No sites found for git pull', 'warning');
            return;
          }
          console.log(allRows);
          // Send request to batch git pull endpoint
          const response = await fetch('/sites/batch-git-pull', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ sites: allRows })
          });

          if (!response.ok) {
            throw new Error('Failed to initiate batch git pull');
          }

          const result = await response.json();

          // Show success message
          showNotification('Batch git pull initiated successfully. Check logs for progress.', 'success');
        } catch (error) {
          console.error('Error in batch git pull:', error);
          showNotification('Failed to initiate batch git pull: ' + error.message, 'error');
        } finally {
          // Reset button state
          button.disabled = false;
          buttonText.textContent = originalText;
        }
      }

      // Function to perform batch cronjob permissions check for all users
      async function batchCheckCronjobPermissions() {
        const button = document.getElementById('batchCheckCronjobPermissionsBtn');
        const buttonText = document.getElementById('batchCheckCronjobPermissionsText');
        const originalText = buttonText.textContent;

        try {
          // Disable button and show loading state
          button.disabled = true;
          buttonText.textContent = 'Processing...';

          // Show notification
          showNotification('Starting batch crontab permission check for all users...', 'info');

          // Send request to batch crontab permission check endpoint
          const response = await fetch('/sites/batch-check-cronjob-permissions', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            }
          });

          if (!response.ok) {
            throw new Error('Failed to initiate batch crontab permission check');
          }

          const result = await response.json();

          if (result.success) {
            const data = result.data;

            // Show detailed results in a modal
            showBatchCronjobResultsModal(data);

            // Show success notification
            showNotification(`Batch crontab permission check completed for ${data.totalUsers} users`, 'success');
          } else {
            throw new Error(result.message || 'Failed to complete batch crontab permission check');
          }
        } catch (error) {
          console.error('Error in batch crontab permission check:', error);
          showNotification('Failed to perform batch crontab permission check: ' + error.message, 'error');
        } finally {
          // Reset button state
          button.disabled = false;
          buttonText.textContent = originalText;
        }
      }

      // Function to show batch cronjob results modal
      function showBatchCronjobResultsModal(data) {
        const modal = document.createElement("div");
        modal.className = "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50";

        modal.innerHTML = `
        <div class="bg-white rounded-lg shadow-xl max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto">
          <div class="p-6">
            <div class="flex items-center mb-4">
              <div class="p-2 bg-blue-100 rounded-lg mr-3">
                <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <div>
                <h3 class="text-lg font-semibold text-gray-900">Batch Crontab Permission Check Results</h3>
                <p class="text-sm text-gray-600">Completed for ${data.totalUsers} users</p>
              </div>
            </div>
            
            <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
              <div class="bg-green-50 border border-green-200 rounded-lg p-4">
                <div class="text-2xl font-bold text-green-600">${data.usersWithPermissions}</div>
                <div class="text-sm text-green-700">With Permissions</div>
              </div>
              <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <div class="text-2xl font-bold text-blue-600">${data.usersFixed}</div>
                <div class="text-sm text-blue-700">Fixed</div>
              </div>
              <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                <div class="text-2xl font-bold text-yellow-600">${data.usersWithoutPermissions - data.usersFixed}</div>
                <div class="text-sm text-yellow-700">Still Need Fix</div>
              </div>
              <div class="bg-gray-50 border border-gray-200 rounded-lg p-4">
                <div class="text-2xl font-bold text-gray-600">${data.successRate}%</div>
                <div class="text-sm text-gray-700">Success Rate</div>
              </div>
            </div>
            
            <div class="flex justify-end mt-6">
              <button type="button" class="close-batch-results-btn px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500">
                Close
              </button>
            </div>
          </div>
        </div>
      `;

        document.body.appendChild(modal);

        // Handle close
        modal.querySelector(".close-batch-results-btn").addEventListener("click", () => {
          document.body.removeChild(modal);
        });

        // Handle click outside modal
        modal.addEventListener("click", (e) => {
          if (e.target === modal) {
            document.body.removeChild(modal);
          }
        });
      }
    </script>
</body>

</html>